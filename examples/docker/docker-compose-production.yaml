name: django-cfg

# Django-CFG - Production Deployment
# Services: Django API + Frontend + WebSocket

services:
  # Django API
  django:
    build:
      context: ..
      dockerfile: docker/services/django/Dockerfile
    image: django-cfg-django:latest
    container_name: django-cfg-django
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      DJANGO_SETTINGS_MODULE: api.settings
    volumes:
      - "../files/django-logs:/app/logs"
      - "../files/django-media:/app/media"
    networks:
      - dokploy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/cfg/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=dokploy-network"
      - "traefik.http.routers.djangocfg-api.rule=Host(`api.djangocfg.com`)"
      - "traefik.http.routers.djangocfg-api.entrypoints=websecure"
      - "traefik.http.routers.djangocfg-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.djangocfg-api.loadbalancer.server.port=8000"

  # Centrifugo WebSocket Server
  centrifugo:
    image: centrifugo/centrifugo:v6
    container_name: django-cfg-centrifugo
    restart: unless-stopped
    entrypoint: ["/docker-entrypoint.sh"]
    env_file:
      - .env.prod
    volumes:
      - ./services/centrifugo/docker-entrypoint.sh:/docker-entrypoint.sh:ro
      - ./services/centrifugo/config.json:/centrifugo/config.template.json:ro
    networks:
      - dokploy-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          memory: 128M
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=dokploy-network"
      - "traefik.http.routers.djangocfg-centrifugo.rule=Host(`ws.djangocfg.com`)"
      - "traefik.http.routers.djangocfg-centrifugo.entrypoints=websecure"
      - "traefik.http.routers.djangocfg-centrifugo.service=djangocfg-centrifugo"
      - "traefik.http.routers.djangocfg-centrifugo.tls=true"
      - "traefik.http.routers.djangocfg-centrifugo.tls.certresolver=letsencrypt"
      - "traefik.http.services.djangocfg-centrifugo.loadbalancer.server.port=8000"

  # Frontend
  frontend:
    build:
      context: ..
      dockerfile: docker/services/frontend/Dockerfile
      target: admin
    image: django-cfg-frontend:latest
    container_name: django-cfg-frontend
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      NODE_ENV: production
    networks:
      - dokploy-network
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=dokploy-network"
      - "traefik.http.routers.djangocfg-demo.rule=Host(`demo.djangocfg.com`)"
      - "traefik.http.routers.djangocfg-demo.entrypoints=websecure"
      - "traefik.http.routers.djangocfg-demo.tls.certresolver=letsencrypt"
      - "traefik.http.services.djangocfg-demo.loadbalancer.server.port=3200"

  # Docusaurus Site
  web:
    build:
      context: ..
      dockerfile: docker/services/web/Dockerfile
    image: django-cfg-web:latest
    container_name: django-cfg-web
    restart: unless-stopped
    env_file:
      - .env.prod
    networks:
      - dokploy-network
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=dokploy-network"
      - "traefik.http.routers.djangocfg-web.rule=Host(`djangocfg.com`) || Host(`www.djangocfg.com`)"
      - "traefik.http.routers.djangocfg-web.entrypoints=websecure"
      - "traefik.http.routers.djangocfg-web.tls.certresolver=letsencrypt"
      - "traefik.http.services.djangocfg-web.loadbalancer.server.port=3001"

  # ReArq Worker (Background tasks processor)
  rearq-worker:
    build:
      context: .
      dockerfile: services/rearq/Dockerfile
    image: django-cfg-rearq-worker:latest
    container_name: django-cfg-rearq-worker
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      REARQ_REDIS_HOST: shared-db-redis
      REARQ_REDIS_PORT: 6379
      REARQ_REDIS_DB: 1
    networks:
      - dokploy-network
    command: ["rearq", "main:rearq", "worker", "--queue", "default", "--queue", "high_priority", "--queue", "low_priority"]
    # Override healthcheck: worker doesn't expose HTTP port, check process instead
    healthcheck:
      test: ["CMD-SHELL", "grep -qa 'rearq.*worker' /proc/1/cmdline || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          memory: 128M

  # ReArq Server (Web UI + API for task monitoring)
  rearq-server:
    build:
      context: .
      dockerfile: services/rearq/Dockerfile
    image: django-cfg-rearq-server:latest
    container_name: django-cfg-rearq-server
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      REARQ_REDIS_HOST: shared-db-redis
      REARQ_REDIS_PORT: 6379
      REARQ_REDIS_DB: 1
      # Use SQLite for Web UI metadata (lightweight)
      REARQ_DB_URL: sqlite:///app/rearq.db
      PYTHONPATH: /app:/rearq_config
    networks:
      - dokploy-network
    # Override entrypoint to run uvicorn directly
    entrypoint: []
    working_dir: /rearq_config
    command: ["sh", "-c", "uvicorn server:app --host 0.0.0.0 --port 8080"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          memory: 128M
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=dokploy-network"
      - "traefik.http.routers.djangocfg-rearq.rule=Host(`tasks.djangocfg.com`)"
      - "traefik.http.routers.djangocfg-rearq.entrypoints=websecure"
      - "traefik.http.routers.djangocfg-rearq.tls.certresolver=letsencrypt"
      - "traefik.http.services.djangocfg-rearq.loadbalancer.server.port=8080"
      # Optional: Add basic auth for security
      # - "traefik.http.routers.djangocfg-rearq.middlewares=rearq-auth"
      # - "traefik.http.middlewares.rearq-auth.basicauth.users=admin:$$apr1$$hash$$here"

  # Demo Database Auto-Resetter (for demo environment only)
  demo-resetter:
    build:
      context: ..
      dockerfile: docker/services/demo-resetter/Dockerfile
    image: django-cfg-demo-resetter:latest
    container_name: django-cfg-demo-resetter
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      # Configuration
      DEMO_RESET_INTERVAL_MINUTES: ${DEMO_RESET_INTERVAL_MINUTES:-10}
      DJANGO_CONTAINER_NAME: django-cfg-django

      # Admin user configuration
      DEMO_ADMIN_USERNAME: ${DEMO_ADMIN_USERNAME:-admin}
      DEMO_ADMIN_EMAIL: ${DEMO_ADMIN_EMAIL:-admin@example.com}
      DEMO_ADMIN_PASSWORD: ${DEMO_ADMIN_PASSWORD:-admin123}
      DEMO_ADMIN_FIRSTNAME: ${DEMO_ADMIN_FIRSTNAME:-Demo}
      DEMO_ADMIN_LASTNAME: ${DEMO_ADMIN_LASTNAME:-Admin}
    volumes:
      # Mount docker socket to execute commands in Django container
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - dokploy-network
    depends_on:
      django:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pgrep", "-f", "db-reset.sh"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 10s
    # Only run if ENABLE_DEMO_RESET is true
    profiles:
      - demo-reset

networks:
  dokploy-network:
    external: true
