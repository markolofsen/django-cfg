/**
 * Simple API Client (auto-generated, strict types, minimal, DRY)
 * Generated at: 2025-10-03T12:02:52.759315
 * DO NOT EDIT - This file is automatically generated
 */import * as BlogEndpoints from './blog';
import { createClient as createBlogClient, createConfig as createBlogConfig } from './blog/client';import * as ShopEndpoints from './shop';
import { createClient as createShopClient, createConfig as createShopConfig } from './shop/client';import * as Cfg_supportEndpoints from './cfg_support';
import { createClient as createCfg_supportClient, createConfig as createCfg_supportConfig } from './cfg_support/client';import * as Cfg_accountsEndpoints from './cfg_accounts';
import { createClient as createCfg_accountsClient, createConfig as createCfg_accountsConfig } from './cfg_accounts/client';import * as Cfg_newsletterEndpoints from './cfg_newsletter';
import { createClient as createCfg_newsletterClient, createConfig as createCfg_newsletterConfig } from './cfg_newsletter/client';import * as Cfg_leadsEndpoints from './cfg_leads';
import { createClient as createCfg_leadsClient, createConfig as createCfg_leadsConfig } from './cfg_leads/client';import * as Cfg_agentsEndpoints from './cfg_agents';
import { createClient as createCfg_agentsClient, createConfig as createCfg_agentsConfig } from './cfg_agents/client';import * as Cfg_tasksEndpoints from './cfg_tasks';
import { createClient as createCfg_tasksClient, createConfig as createCfg_tasksConfig } from './cfg_tasks/client';import * as Cfg_paymentsEndpoints from './cfg_payments';
import { createClient as createCfg_paymentsClient, createConfig as createCfg_paymentsConfig } from './cfg_payments/client';export * as BlogTypes from './blog';export * as ShopTypes from './shop';export * as Cfg_supportTypes from './cfg_support';export * as Cfg_accountsTypes from './cfg_accounts';export * as Cfg_newsletterTypes from './cfg_newsletter';export * as Cfg_leadsTypes from './cfg_leads';export * as Cfg_agentsTypes from './cfg_agents';export * as Cfg_tasksTypes from './cfg_tasks';export * as Cfg_paymentsTypes from './cfg_payments';
export const TOKEN_KEY = "auth_token";
export const REFRESH_TOKEN_KEY = "refresh_token";

function makeEndpoints<T extends Record<string, any>, C>(
  endpoints: T,
  client: C
): {
  [K in keyof T]: T[K] extends (options: infer O) => infer R
    ? (options?: Omit<O, 'client'>) => R
    : never;
} {
  const result = {} as any;
  (Object.keys(endpoints) as Array<keyof T>).forEach((key) => {
    const fn = endpoints[key];
    if (typeof fn === 'function') {
      result[key] = (options = {}) => fn({ ...options, client });
    }
  });
  return result as {
    [K in keyof T]: T[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };
}

export class API {
  private apiUrl: string;
  private customHeaders: Record<string, string> = {};  public blog!: {
    [K in keyof typeof BlogEndpoints]: typeof BlogEndpoints[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };  public shop!: {
    [K in keyof typeof ShopEndpoints]: typeof ShopEndpoints[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };  public cfgSupport!: {
    [K in keyof typeof Cfg_supportEndpoints]: typeof Cfg_supportEndpoints[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };  public cfgAccounts!: {
    [K in keyof typeof Cfg_accountsEndpoints]: typeof Cfg_accountsEndpoints[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };  public cfgNewsletter!: {
    [K in keyof typeof Cfg_newsletterEndpoints]: typeof Cfg_newsletterEndpoints[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };  public cfgLeads!: {
    [K in keyof typeof Cfg_leadsEndpoints]: typeof Cfg_leadsEndpoints[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };  public cfgAgents!: {
    [K in keyof typeof Cfg_agentsEndpoints]: typeof Cfg_agentsEndpoints[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };  public cfgTasks!: {
    [K in keyof typeof Cfg_tasksEndpoints]: typeof Cfg_tasksEndpoints[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };  public cfgPayments!: {
    [K in keyof typeof Cfg_paymentsEndpoints]: typeof Cfg_paymentsEndpoints[K] extends (options: infer O) => infer R
      ? (options?: Omit<O, 'client'>) => R
      : never;
  };
  constructor(apiUrl: string) {
    this.apiUrl = apiUrl;
    this._initClients();
  }

  private _makeConfig() {
    const token = this.getToken();
    const headers: Record<string, string> = { ...this.customHeaders };
    
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }
    
    return {
      baseUrl: this.apiUrl,
      headers: Object.keys(headers).length > 0 ? headers : undefined,
    };
  }

  _initClients() {
    const config = this._makeConfig();    this.blog = makeEndpoints(
      BlogEndpoints,
      createBlogClient(createBlogConfig(config))
    );    this.shop = makeEndpoints(
      ShopEndpoints,
      createShopClient(createShopConfig(config))
    );    this.cfgSupport = makeEndpoints(
      Cfg_supportEndpoints,
      createCfg_supportClient(createCfg_supportConfig(config))
    );    this.cfgAccounts = makeEndpoints(
      Cfg_accountsEndpoints,
      createCfg_accountsClient(createCfg_accountsConfig(config))
    );    this.cfgNewsletter = makeEndpoints(
      Cfg_newsletterEndpoints,
      createCfg_newsletterClient(createCfg_newsletterConfig(config))
    );    this.cfgLeads = makeEndpoints(
      Cfg_leadsEndpoints,
      createCfg_leadsClient(createCfg_leadsConfig(config))
    );    this.cfgAgents = makeEndpoints(
      Cfg_agentsEndpoints,
      createCfg_agentsClient(createCfg_agentsConfig(config))
    );    this.cfgTasks = makeEndpoints(
      Cfg_tasksEndpoints,
      createCfg_tasksClient(createCfg_tasksConfig(config))
    );    this.cfgPayments = makeEndpoints(
      Cfg_paymentsEndpoints,
      createCfg_paymentsClient(createCfg_paymentsConfig(config))
    );  }

  /**
   * Set custom headers for API requests
   * @param headers - Object with header key-value pairs
   */
  setHeaders(headers: Record<string, string>) {
    this.customHeaders = { ...this.customHeaders, ...headers };
    this._initClients();
  }

  /**
   * Set API key for authentication
   * @param apiKey - The API key to use
   */
  setApiKey(apiKey: string) {
    this.setHeaders({ 'X-API-Key': apiKey });
  }

  /**
   * Clear all custom headers
   */
  clearHeaders() {
    this.customHeaders = {};
    this._initClients();
  }

  /**
   * Get current custom headers
   */
  getHeaders(): Record<string, string> {
    return { ...this.customHeaders };
  }

  getToken() {
    if (typeof window === 'undefined') return null;
    return localStorage.getItem(TOKEN_KEY);
  }
  getRefreshToken() {
    if (typeof window === 'undefined') return null;
    return localStorage.getItem(REFRESH_TOKEN_KEY);
  }
  setToken(token: string, refreshToken?: string) {
    if (typeof window === 'undefined') return;
    localStorage.setItem(TOKEN_KEY, token);
    if (refreshToken) {
      localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);
    }
    this._initClients();
  }
  clearTokens() {
    if (typeof window === 'undefined') return;
    localStorage.removeItem(TOKEN_KEY);
    localStorage.removeItem(REFRESH_TOKEN_KEY);
    this._initClients();
  }
  isAuthenticated() {
    return !!this.getToken();
  }
  setApiUrl(url: string) {
    this.apiUrl = url;
    this._initClients();
  }
  getApiUrl() {
    return this.apiUrl;
  }
}

// Export the class for manual instantiation
export default API; 