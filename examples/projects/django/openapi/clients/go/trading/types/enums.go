// Code generated by django-cfg/django_client - DO NOT EDIT.
// Generated at: 2025-10-28T07:47:33.427805

package types

import (
	"encoding/json"
	"fmt"
)

// * `market` - Market
// * `limit` - Limit
// * `stop_loss` - Stop Loss
type OrderOrderType string

const (
	// OrderOrderTypeMarket
	OrderOrderTypeMarket OrderOrderType = "market"
	// OrderOrderTypeLimit
	OrderOrderTypeLimit OrderOrderType = "limit"
	// OrderOrderTypeStopLoss
	OrderOrderTypeStopLoss OrderOrderType = "stop_loss"
)

// String returns string representation of OrderOrderType.
func (e OrderOrderType) String() string {
	switch e {
	case OrderOrderTypeMarket:
		return "OrderOrderTypeMarket"
	case OrderOrderTypeLimit:
		return "OrderOrderTypeLimit"
	case OrderOrderTypeStopLoss:
		return "OrderOrderTypeStopLoss"
	default:
		return fmt.Sprintf("OrderOrderType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e OrderOrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *OrderOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = OrderOrderType(v)
	return nil
}

// * `buy` - Buy
// * `sell` - Sell
type OrderSide string

const (
	// OrderSideBuy
	OrderSideBuy OrderSide = "buy"
	// OrderSideSell
	OrderSideSell OrderSide = "sell"
)

// String returns string representation of OrderSide.
func (e OrderSide) String() string {
	switch e {
	case OrderSideBuy:
		return "OrderSideBuy"
	case OrderSideSell:
		return "OrderSideSell"
	default:
		return fmt.Sprintf("OrderSide(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e OrderSide) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *OrderSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = OrderSide(v)
	return nil
}

// * `pending` - Pending
// * `filled` - Filled
// * `cancelled` - Cancelled
type OrderStatus string

const (
	// OrderStatusPending
	OrderStatusPending OrderStatus = "pending"
	// OrderStatusFilled
	OrderStatusFilled OrderStatus = "filled"
	// OrderStatusCancelled
	OrderStatusCancelled OrderStatus = "cancelled"
)

// String returns string representation of OrderStatus.
func (e OrderStatus) String() string {
	switch e {
	case OrderStatusPending:
		return "OrderStatusPending"
	case OrderStatusFilled:
		return "OrderStatusFilled"
	case OrderStatusCancelled:
		return "OrderStatusCancelled"
	default:
		return fmt.Sprintf("OrderStatus(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e OrderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *OrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = OrderStatus(v)
	return nil
}

// * `market` - Market
// * `limit` - Limit
// * `stop_loss` - Stop Loss
type OrdercreateOrderType string

const (
	// OrdercreateOrderTypeMarket
	OrdercreateOrderTypeMarket OrdercreateOrderType = "market"
	// OrdercreateOrderTypeLimit
	OrdercreateOrderTypeLimit OrdercreateOrderType = "limit"
	// OrdercreateOrderTypeStopLoss
	OrdercreateOrderTypeStopLoss OrdercreateOrderType = "stop_loss"
)

// String returns string representation of OrdercreateOrderType.
func (e OrdercreateOrderType) String() string {
	switch e {
	case OrdercreateOrderTypeMarket:
		return "OrdercreateOrderTypeMarket"
	case OrdercreateOrderTypeLimit:
		return "OrdercreateOrderTypeLimit"
	case OrdercreateOrderTypeStopLoss:
		return "OrdercreateOrderTypeStopLoss"
	default:
		return fmt.Sprintf("OrdercreateOrderType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e OrdercreateOrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *OrdercreateOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = OrdercreateOrderType(v)
	return nil
}

// * `buy` - Buy
// * `sell` - Sell
type OrdercreateSide string

const (
	// OrdercreateSideBuy
	OrdercreateSideBuy OrdercreateSide = "buy"
	// OrdercreateSideSell
	OrdercreateSideSell OrdercreateSide = "sell"
)

// String returns string representation of OrdercreateSide.
func (e OrdercreateSide) String() string {
	switch e {
	case OrdercreateSideBuy:
		return "OrdercreateSideBuy"
	case OrdercreateSideSell:
		return "OrdercreateSideSell"
	default:
		return fmt.Sprintf("OrdercreateSide(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e OrdercreateSide) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *OrdercreateSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = OrdercreateSide(v)
	return nil
}

// * `market` - Market
// * `limit` - Limit
// * `stop_loss` - Stop Loss
type OrdercreaterequestOrderType string

const (
	// OrdercreaterequestOrderTypeMarket
	OrdercreaterequestOrderTypeMarket OrdercreaterequestOrderType = "market"
	// OrdercreaterequestOrderTypeLimit
	OrdercreaterequestOrderTypeLimit OrdercreaterequestOrderType = "limit"
	// OrdercreaterequestOrderTypeStopLoss
	OrdercreaterequestOrderTypeStopLoss OrdercreaterequestOrderType = "stop_loss"
)

// String returns string representation of OrdercreaterequestOrderType.
func (e OrdercreaterequestOrderType) String() string {
	switch e {
	case OrdercreaterequestOrderTypeMarket:
		return "OrdercreaterequestOrderTypeMarket"
	case OrdercreaterequestOrderTypeLimit:
		return "OrdercreaterequestOrderTypeLimit"
	case OrdercreaterequestOrderTypeStopLoss:
		return "OrdercreaterequestOrderTypeStopLoss"
	default:
		return fmt.Sprintf("OrdercreaterequestOrderType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e OrdercreaterequestOrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *OrdercreaterequestOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = OrdercreaterequestOrderType(v)
	return nil
}

// * `buy` - Buy
// * `sell` - Sell
type OrdercreaterequestSide string

const (
	// OrdercreaterequestSideBuy
	OrdercreaterequestSideBuy OrdercreaterequestSide = "buy"
	// OrdercreaterequestSideSell
	OrdercreaterequestSideSell OrdercreaterequestSide = "sell"
)

// String returns string representation of OrdercreaterequestSide.
func (e OrdercreaterequestSide) String() string {
	switch e {
	case OrdercreaterequestSideBuy:
		return "OrdercreaterequestSideBuy"
	case OrdercreaterequestSideSell:
		return "OrdercreaterequestSideSell"
	default:
		return fmt.Sprintf("OrdercreaterequestSide(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e OrdercreaterequestSide) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *OrdercreaterequestSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = OrdercreaterequestSide(v)
	return nil
}

// * `market` - Market
// * `limit` - Limit
// * `stop_loss` - Stop Loss
type OrderrequestOrderType string

const (
	// OrderrequestOrderTypeMarket
	OrderrequestOrderTypeMarket OrderrequestOrderType = "market"
	// OrderrequestOrderTypeLimit
	OrderrequestOrderTypeLimit OrderrequestOrderType = "limit"
	// OrderrequestOrderTypeStopLoss
	OrderrequestOrderTypeStopLoss OrderrequestOrderType = "stop_loss"
)

// String returns string representation of OrderrequestOrderType.
func (e OrderrequestOrderType) String() string {
	switch e {
	case OrderrequestOrderTypeMarket:
		return "OrderrequestOrderTypeMarket"
	case OrderrequestOrderTypeLimit:
		return "OrderrequestOrderTypeLimit"
	case OrderrequestOrderTypeStopLoss:
		return "OrderrequestOrderTypeStopLoss"
	default:
		return fmt.Sprintf("OrderrequestOrderType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e OrderrequestOrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *OrderrequestOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = OrderrequestOrderType(v)
	return nil
}

// * `buy` - Buy
// * `sell` - Sell
type OrderrequestSide string

const (
	// OrderrequestSideBuy
	OrderrequestSideBuy OrderrequestSide = "buy"
	// OrderrequestSideSell
	OrderrequestSideSell OrderrequestSide = "sell"
)

// String returns string representation of OrderrequestSide.
func (e OrderrequestSide) String() string {
	switch e {
	case OrderrequestSideBuy:
		return "OrderrequestSideBuy"
	case OrderrequestSideSell:
		return "OrderrequestSideSell"
	default:
		return fmt.Sprintf("OrderrequestSide(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e OrderrequestSide) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *OrderrequestSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = OrderrequestSide(v)
	return nil
}

// * `market` - Market
// * `limit` - Limit
// * `stop_loss` - Stop Loss
type PatchedorderrequestOrderType string

const (
	// PatchedorderrequestOrderTypeMarket
	PatchedorderrequestOrderTypeMarket PatchedorderrequestOrderType = "market"
	// PatchedorderrequestOrderTypeLimit
	PatchedorderrequestOrderTypeLimit PatchedorderrequestOrderType = "limit"
	// PatchedorderrequestOrderTypeStopLoss
	PatchedorderrequestOrderTypeStopLoss PatchedorderrequestOrderType = "stop_loss"
)

// String returns string representation of PatchedorderrequestOrderType.
func (e PatchedorderrequestOrderType) String() string {
	switch e {
	case PatchedorderrequestOrderTypeMarket:
		return "PatchedorderrequestOrderTypeMarket"
	case PatchedorderrequestOrderTypeLimit:
		return "PatchedorderrequestOrderTypeLimit"
	case PatchedorderrequestOrderTypeStopLoss:
		return "PatchedorderrequestOrderTypeStopLoss"
	default:
		return fmt.Sprintf("PatchedorderrequestOrderType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e PatchedorderrequestOrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *PatchedorderrequestOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = PatchedorderrequestOrderType(v)
	return nil
}

// * `buy` - Buy
// * `sell` - Sell
type PatchedorderrequestSide string

const (
	// PatchedorderrequestSideBuy
	PatchedorderrequestSideBuy PatchedorderrequestSide = "buy"
	// PatchedorderrequestSideSell
	PatchedorderrequestSideSell PatchedorderrequestSide = "sell"
)

// String returns string representation of PatchedorderrequestSide.
func (e PatchedorderrequestSide) String() string {
	switch e {
	case PatchedorderrequestSideBuy:
		return "PatchedorderrequestSideBuy"
	case PatchedorderrequestSideSell:
		return "PatchedorderrequestSideSell"
	default:
		return fmt.Sprintf("PatchedorderrequestSide(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e PatchedorderrequestSide) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *PatchedorderrequestSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = PatchedorderrequestSide(v)
	return nil
}

