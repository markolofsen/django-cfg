// Code generated by django-cfg/django_client - DO NOT EDIT.
// Generated at: 2025-10-28T07:47:33.412061

package trading__api__trading

import (
	"time"
	"trading/types"
)

// Serializer for orders.
type Order struct {
	ID int64 `json:"id"`
	Portfolio int64 `json:"portfolio"`
	// Trading pair (e.g., BTC/USDT)
	Symbol string `json:"symbol"`
	// * `market` - Market
	// * `limit` - Limit
	// * `stop_loss` - Stop Loss
	OrderType *types.OrderOrderType `json:"order_type,omitempty"`
	// * `buy` - Buy
	// * `sell` - Sell
	Side types.OrderSide `json:"side"`
	Quantity string `json:"quantity"`
	Price *string `json:"price,omitempty"`
	FilledQuantity string `json:"filled_quantity"`
	// * `pending` - Pending
	// * `filled` - Filled
	// * `cancelled` - Cancelled
	Status types.OrderStatus `json:"status"`
	TotalUsd string `json:"total_usd"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Serializer for creating orders.
type OrderCreate struct {
	// Trading pair (e.g., BTC/USDT)
	Symbol string `json:"symbol"`
	// * `market` - Market
	// * `limit` - Limit
	// * `stop_loss` - Stop Loss
	OrderType *types.OrdercreateOrderType `json:"order_type,omitempty"`
	// * `buy` - Buy
	// * `sell` - Sell
	Side types.OrdercreateSide `json:"side"`
	Quantity string `json:"quantity"`
	Price *string `json:"price,omitempty"`
}

// Serializer for creating orders.
type OrderCreateRequest struct {
	// Trading pair (e.g., BTC/USDT)
	Symbol string `json:"symbol"`
	// * `market` - Market
	// * `limit` - Limit
	// * `stop_loss` - Stop Loss
	OrderType *types.OrdercreaterequestOrderType `json:"order_type,omitempty"`
	// * `buy` - Buy
	// * `sell` - Sell
	Side types.OrdercreaterequestSide `json:"side"`
	Quantity string `json:"quantity"`
	Price *string `json:"price,omitempty"`
}

// Serializer for orders.
type OrderRequest struct {
	Portfolio int64 `json:"portfolio"`
	// Trading pair (e.g., BTC/USDT)
	Symbol string `json:"symbol"`
	// * `market` - Market
	// * `limit` - Limit
	// * `stop_loss` - Stop Loss
	OrderType *types.OrderrequestOrderType `json:"order_type,omitempty"`
	// * `buy` - Buy
	// * `sell` - Sell
	Side types.OrderrequestSide `json:"side"`
	Quantity string `json:"quantity"`
	Price *string `json:"price,omitempty"`
}

// PaginatedOrderList model.
type PaginatedOrderList struct {
	// Total number of items across all pages
	Count int64 `json:"count"`
	// Current page number (1-based)
	Page int64 `json:"page"`
	// Total number of pages
	Pages int64 `json:"pages"`
	// Number of items per page
	PageSize int64 `json:"page_size"`
	// Whether there is a next page
	HasNext bool `json:"has_next"`
	// Whether there is a previous page
	HasPrevious bool `json:"has_previous"`
	// Next page number (null if no next page)
	NextPage *int64 `json:"next_page,omitempty"`
	// Previous page number (null if no previous page)
	PreviousPage *int64 `json:"previous_page,omitempty"`
	// Array of items for current page
	Results []Order `json:"results"`
}

// PaginatedPortfolioList model.
type PaginatedPortfolioList struct {
	// Total number of items across all pages
	Count int64 `json:"count"`
	// Current page number (1-based)
	Page int64 `json:"page"`
	// Total number of pages
	Pages int64 `json:"pages"`
	// Number of items per page
	PageSize int64 `json:"page_size"`
	// Whether there is a next page
	HasNext bool `json:"has_next"`
	// Whether there is a previous page
	HasPrevious bool `json:"has_previous"`
	// Next page number (null if no next page)
	NextPage *int64 `json:"next_page,omitempty"`
	// Previous page number (null if no previous page)
	PreviousPage *int64 `json:"previous_page,omitempty"`
	// Array of items for current page
	Results []Portfolio `json:"results"`
}

// Serializer for orders.
type PatchedOrderRequest struct {
	Portfolio *int64 `json:"portfolio,omitempty"`
	// Trading pair (e.g., BTC/USDT)
	Symbol *string `json:"symbol,omitempty"`
	// * `market` - Market
	// * `limit` - Limit
	// * `stop_loss` - Stop Loss
	OrderType *types.PatchedorderrequestOrderType `json:"order_type,omitempty"`
	// * `buy` - Buy
	// * `sell` - Sell
	Side *types.PatchedorderrequestSide `json:"side,omitempty"`
	Quantity *string `json:"quantity,omitempty"`
	Price *string `json:"price,omitempty"`
}

// Serializer for trading portfolios.
type Portfolio struct {
	ID int64 `json:"id"`
	User int64 `json:"user"`
	UserInfo map[string]interface{} `json:"user_info"`
	// Total portfolio value in USD
	TotalBalanceUsd string `json:"total_balance_usd"`
	// Available balance for trading
	AvailableBalanceUsd *string `json:"available_balance_usd,omitempty"`
	TotalProfitLoss string `json:"total_profit_loss"`
	TotalTrades int64 `json:"total_trades"`
	WinningTrades int64 `json:"winning_trades"`
	LosingTrades int64 `json:"losing_trades"`
	WinRate float64 `json:"win_rate"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Serializer for portfolio statistics.
type PortfolioStats struct {
	TotalPortfolios int64 `json:"total_portfolios"`
	TotalVolumeUsd string `json:"total_volume_usd"`
	TotalOrders int64 `json:"total_orders"`
}

