// Code generated by django-cfg/django_client - DO NOT EDIT.
// Generated at: 2025-10-28T07:47:34.560156

package types

import (
	"encoding/json"
	"fmt"
)

// Content classification
// 
// * `document` - Document
// * `code` - Code
// * `image` - Image
// * `data` - Data
// * `archive` - Archive
// * `unknown` - Unknown
type ArchiveitemContentType string

const (
	// ArchiveitemContentTypeDocument
	ArchiveitemContentTypeDocument ArchiveitemContentType = "document"
	// ArchiveitemContentTypeCode
	ArchiveitemContentTypeCode ArchiveitemContentType = "code"
	// ArchiveitemContentTypeImage
	ArchiveitemContentTypeImage ArchiveitemContentType = "image"
	// ArchiveitemContentTypeData
	ArchiveitemContentTypeData ArchiveitemContentType = "data"
	// ArchiveitemContentTypeArchive
	ArchiveitemContentTypeArchive ArchiveitemContentType = "archive"
	// ArchiveitemContentTypeUnknown
	ArchiveitemContentTypeUnknown ArchiveitemContentType = "unknown"
)

// String returns string representation of ArchiveitemContentType.
func (e ArchiveitemContentType) String() string {
	switch e {
	case ArchiveitemContentTypeDocument:
		return "ArchiveitemContentTypeDocument"
	case ArchiveitemContentTypeCode:
		return "ArchiveitemContentTypeCode"
	case ArchiveitemContentTypeImage:
		return "ArchiveitemContentTypeImage"
	case ArchiveitemContentTypeData:
		return "ArchiveitemContentTypeData"
	case ArchiveitemContentTypeArchive:
		return "ArchiveitemContentTypeArchive"
	case ArchiveitemContentTypeUnknown:
		return "ArchiveitemContentTypeUnknown"
	default:
		return fmt.Sprintf("ArchiveitemContentType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e ArchiveitemContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *ArchiveitemContentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = ArchiveitemContentType(v)
	return nil
}

// Type of content in chunk
// 
// * `text` - Text
// * `code` - Code
// * `heading` - Heading
// * `metadata` - Metadata
// * `table` - Table
// * `list` - List
type ArchiveitemchunkChunkType string

const (
	// ArchiveitemchunkChunkTypeText
	ArchiveitemchunkChunkTypeText ArchiveitemchunkChunkType = "text"
	// ArchiveitemchunkChunkTypeCode
	ArchiveitemchunkChunkTypeCode ArchiveitemchunkChunkType = "code"
	// ArchiveitemchunkChunkTypeHeading
	ArchiveitemchunkChunkTypeHeading ArchiveitemchunkChunkType = "heading"
	// ArchiveitemchunkChunkTypeMetadata
	ArchiveitemchunkChunkTypeMetadata ArchiveitemchunkChunkType = "metadata"
	// ArchiveitemchunkChunkTypeTable
	ArchiveitemchunkChunkTypeTable ArchiveitemchunkChunkType = "table"
	// ArchiveitemchunkChunkTypeList
	ArchiveitemchunkChunkTypeList ArchiveitemchunkChunkType = "list"
)

// String returns string representation of ArchiveitemchunkChunkType.
func (e ArchiveitemchunkChunkType) String() string {
	switch e {
	case ArchiveitemchunkChunkTypeText:
		return "ArchiveitemchunkChunkTypeText"
	case ArchiveitemchunkChunkTypeCode:
		return "ArchiveitemchunkChunkTypeCode"
	case ArchiveitemchunkChunkTypeHeading:
		return "ArchiveitemchunkChunkTypeHeading"
	case ArchiveitemchunkChunkTypeMetadata:
		return "ArchiveitemchunkChunkTypeMetadata"
	case ArchiveitemchunkChunkTypeTable:
		return "ArchiveitemchunkChunkTypeTable"
	case ArchiveitemchunkChunkTypeList:
		return "ArchiveitemchunkChunkTypeList"
	default:
		return fmt.Sprintf("ArchiveitemchunkChunkType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e ArchiveitemchunkChunkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *ArchiveitemchunkChunkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = ArchiveitemchunkChunkType(v)
	return nil
}

// Type of content in chunk
// 
// * `text` - Text
// * `code` - Code
// * `heading` - Heading
// * `metadata` - Metadata
// * `table` - Table
// * `list` - List
type ArchiveitemchunkdetailChunkType string

const (
	// ArchiveitemchunkdetailChunkTypeText
	ArchiveitemchunkdetailChunkTypeText ArchiveitemchunkdetailChunkType = "text"
	// ArchiveitemchunkdetailChunkTypeCode
	ArchiveitemchunkdetailChunkTypeCode ArchiveitemchunkdetailChunkType = "code"
	// ArchiveitemchunkdetailChunkTypeHeading
	ArchiveitemchunkdetailChunkTypeHeading ArchiveitemchunkdetailChunkType = "heading"
	// ArchiveitemchunkdetailChunkTypeMetadata
	ArchiveitemchunkdetailChunkTypeMetadata ArchiveitemchunkdetailChunkType = "metadata"
	// ArchiveitemchunkdetailChunkTypeTable
	ArchiveitemchunkdetailChunkTypeTable ArchiveitemchunkdetailChunkType = "table"
	// ArchiveitemchunkdetailChunkTypeList
	ArchiveitemchunkdetailChunkTypeList ArchiveitemchunkdetailChunkType = "list"
)

// String returns string representation of ArchiveitemchunkdetailChunkType.
func (e ArchiveitemchunkdetailChunkType) String() string {
	switch e {
	case ArchiveitemchunkdetailChunkTypeText:
		return "ArchiveitemchunkdetailChunkTypeText"
	case ArchiveitemchunkdetailChunkTypeCode:
		return "ArchiveitemchunkdetailChunkTypeCode"
	case ArchiveitemchunkdetailChunkTypeHeading:
		return "ArchiveitemchunkdetailChunkTypeHeading"
	case ArchiveitemchunkdetailChunkTypeMetadata:
		return "ArchiveitemchunkdetailChunkTypeMetadata"
	case ArchiveitemchunkdetailChunkTypeTable:
		return "ArchiveitemchunkdetailChunkTypeTable"
	case ArchiveitemchunkdetailChunkTypeList:
		return "ArchiveitemchunkdetailChunkTypeList"
	default:
		return fmt.Sprintf("ArchiveitemchunkdetailChunkType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e ArchiveitemchunkdetailChunkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *ArchiveitemchunkdetailChunkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = ArchiveitemchunkdetailChunkType(v)
	return nil
}

// Type of content in chunk
// 
// * `text` - Text
// * `code` - Code
// * `heading` - Heading
// * `metadata` - Metadata
// * `table` - Table
// * `list` - List
type ArchiveitemchunkrequestChunkType string

const (
	// ArchiveitemchunkrequestChunkTypeText
	ArchiveitemchunkrequestChunkTypeText ArchiveitemchunkrequestChunkType = "text"
	// ArchiveitemchunkrequestChunkTypeCode
	ArchiveitemchunkrequestChunkTypeCode ArchiveitemchunkrequestChunkType = "code"
	// ArchiveitemchunkrequestChunkTypeHeading
	ArchiveitemchunkrequestChunkTypeHeading ArchiveitemchunkrequestChunkType = "heading"
	// ArchiveitemchunkrequestChunkTypeMetadata
	ArchiveitemchunkrequestChunkTypeMetadata ArchiveitemchunkrequestChunkType = "metadata"
	// ArchiveitemchunkrequestChunkTypeTable
	ArchiveitemchunkrequestChunkTypeTable ArchiveitemchunkrequestChunkType = "table"
	// ArchiveitemchunkrequestChunkTypeList
	ArchiveitemchunkrequestChunkTypeList ArchiveitemchunkrequestChunkType = "list"
)

// String returns string representation of ArchiveitemchunkrequestChunkType.
func (e ArchiveitemchunkrequestChunkType) String() string {
	switch e {
	case ArchiveitemchunkrequestChunkTypeText:
		return "ArchiveitemchunkrequestChunkTypeText"
	case ArchiveitemchunkrequestChunkTypeCode:
		return "ArchiveitemchunkrequestChunkTypeCode"
	case ArchiveitemchunkrequestChunkTypeHeading:
		return "ArchiveitemchunkrequestChunkTypeHeading"
	case ArchiveitemchunkrequestChunkTypeMetadata:
		return "ArchiveitemchunkrequestChunkTypeMetadata"
	case ArchiveitemchunkrequestChunkTypeTable:
		return "ArchiveitemchunkrequestChunkTypeTable"
	case ArchiveitemchunkrequestChunkTypeList:
		return "ArchiveitemchunkrequestChunkTypeList"
	default:
		return fmt.Sprintf("ArchiveitemchunkrequestChunkType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e ArchiveitemchunkrequestChunkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *ArchiveitemchunkrequestChunkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = ArchiveitemchunkrequestChunkType(v)
	return nil
}

// Content classification
// 
// * `document` - Document
// * `code` - Code
// * `image` - Image
// * `data` - Data
// * `archive` - Archive
// * `unknown` - Unknown
type ArchiveitemdetailContentType string

const (
	// ArchiveitemdetailContentTypeDocument
	ArchiveitemdetailContentTypeDocument ArchiveitemdetailContentType = "document"
	// ArchiveitemdetailContentTypeCode
	ArchiveitemdetailContentTypeCode ArchiveitemdetailContentType = "code"
	// ArchiveitemdetailContentTypeImage
	ArchiveitemdetailContentTypeImage ArchiveitemdetailContentType = "image"
	// ArchiveitemdetailContentTypeData
	ArchiveitemdetailContentTypeData ArchiveitemdetailContentType = "data"
	// ArchiveitemdetailContentTypeArchive
	ArchiveitemdetailContentTypeArchive ArchiveitemdetailContentType = "archive"
	// ArchiveitemdetailContentTypeUnknown
	ArchiveitemdetailContentTypeUnknown ArchiveitemdetailContentType = "unknown"
)

// String returns string representation of ArchiveitemdetailContentType.
func (e ArchiveitemdetailContentType) String() string {
	switch e {
	case ArchiveitemdetailContentTypeDocument:
		return "ArchiveitemdetailContentTypeDocument"
	case ArchiveitemdetailContentTypeCode:
		return "ArchiveitemdetailContentTypeCode"
	case ArchiveitemdetailContentTypeImage:
		return "ArchiveitemdetailContentTypeImage"
	case ArchiveitemdetailContentTypeData:
		return "ArchiveitemdetailContentTypeData"
	case ArchiveitemdetailContentTypeArchive:
		return "ArchiveitemdetailContentTypeArchive"
	case ArchiveitemdetailContentTypeUnknown:
		return "ArchiveitemdetailContentTypeUnknown"
	default:
		return fmt.Sprintf("ArchiveitemdetailContentType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e ArchiveitemdetailContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *ArchiveitemdetailContentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = ArchiveitemdetailContentType(v)
	return nil
}

// * `text` - Text
// * `code` - Code
// * `heading` - Heading
// * `metadata` - Metadata
// * `table` - Table
// * `list` - List
type ArchivesearchrequestrequestChunkTypesItems string

const (
	// ArchivesearchrequestrequestChunkTypesItemsText
	ArchivesearchrequestrequestChunkTypesItemsText ArchivesearchrequestrequestChunkTypesItems = "text"
	// ArchivesearchrequestrequestChunkTypesItemsCode
	ArchivesearchrequestrequestChunkTypesItemsCode ArchivesearchrequestrequestChunkTypesItems = "code"
	// ArchivesearchrequestrequestChunkTypesItemsHeading
	ArchivesearchrequestrequestChunkTypesItemsHeading ArchivesearchrequestrequestChunkTypesItems = "heading"
	// ArchivesearchrequestrequestChunkTypesItemsMetadata
	ArchivesearchrequestrequestChunkTypesItemsMetadata ArchivesearchrequestrequestChunkTypesItems = "metadata"
	// ArchivesearchrequestrequestChunkTypesItemsTable
	ArchivesearchrequestrequestChunkTypesItemsTable ArchivesearchrequestrequestChunkTypesItems = "table"
	// ArchivesearchrequestrequestChunkTypesItemsList
	ArchivesearchrequestrequestChunkTypesItemsList ArchivesearchrequestrequestChunkTypesItems = "list"
)

// String returns string representation of ArchivesearchrequestrequestChunkTypesItems.
func (e ArchivesearchrequestrequestChunkTypesItems) String() string {
	switch e {
	case ArchivesearchrequestrequestChunkTypesItemsText:
		return "ArchivesearchrequestrequestChunkTypesItemsText"
	case ArchivesearchrequestrequestChunkTypesItemsCode:
		return "ArchivesearchrequestrequestChunkTypesItemsCode"
	case ArchivesearchrequestrequestChunkTypesItemsHeading:
		return "ArchivesearchrequestrequestChunkTypesItemsHeading"
	case ArchivesearchrequestrequestChunkTypesItemsMetadata:
		return "ArchivesearchrequestrequestChunkTypesItemsMetadata"
	case ArchivesearchrequestrequestChunkTypesItemsTable:
		return "ArchivesearchrequestrequestChunkTypesItemsTable"
	case ArchivesearchrequestrequestChunkTypesItemsList:
		return "ArchivesearchrequestrequestChunkTypesItemsList"
	default:
		return fmt.Sprintf("ArchivesearchrequestrequestChunkTypesItems(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e ArchivesearchrequestrequestChunkTypesItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *ArchivesearchrequestrequestChunkTypesItems) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = ArchivesearchrequestrequestChunkTypesItems(v)
	return nil
}

// * `document` - Document
// * `code` - Code
// * `image` - Image
// * `data` - Data
// * `archive` - Archive
// * `unknown` - Unknown
type ArchivesearchrequestrequestContentTypesItems string

const (
	// ArchivesearchrequestrequestContentTypesItemsDocument
	ArchivesearchrequestrequestContentTypesItemsDocument ArchivesearchrequestrequestContentTypesItems = "document"
	// ArchivesearchrequestrequestContentTypesItemsCode
	ArchivesearchrequestrequestContentTypesItemsCode ArchivesearchrequestrequestContentTypesItems = "code"
	// ArchivesearchrequestrequestContentTypesItemsImage
	ArchivesearchrequestrequestContentTypesItemsImage ArchivesearchrequestrequestContentTypesItems = "image"
	// ArchivesearchrequestrequestContentTypesItemsData
	ArchivesearchrequestrequestContentTypesItemsData ArchivesearchrequestrequestContentTypesItems = "data"
	// ArchivesearchrequestrequestContentTypesItemsArchive
	ArchivesearchrequestrequestContentTypesItemsArchive ArchivesearchrequestrequestContentTypesItems = "archive"
	// ArchivesearchrequestrequestContentTypesItemsUnknown
	ArchivesearchrequestrequestContentTypesItemsUnknown ArchivesearchrequestrequestContentTypesItems = "unknown"
)

// String returns string representation of ArchivesearchrequestrequestContentTypesItems.
func (e ArchivesearchrequestrequestContentTypesItems) String() string {
	switch e {
	case ArchivesearchrequestrequestContentTypesItemsDocument:
		return "ArchivesearchrequestrequestContentTypesItemsDocument"
	case ArchivesearchrequestrequestContentTypesItemsCode:
		return "ArchivesearchrequestrequestContentTypesItemsCode"
	case ArchivesearchrequestrequestContentTypesItemsImage:
		return "ArchivesearchrequestrequestContentTypesItemsImage"
	case ArchivesearchrequestrequestContentTypesItemsData:
		return "ArchivesearchrequestrequestContentTypesItemsData"
	case ArchivesearchrequestrequestContentTypesItemsArchive:
		return "ArchivesearchrequestrequestContentTypesItemsArchive"
	case ArchivesearchrequestrequestContentTypesItemsUnknown:
		return "ArchivesearchrequestrequestContentTypesItemsUnknown"
	default:
		return fmt.Sprintf("ArchivesearchrequestrequestContentTypesItems(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e ArchivesearchrequestrequestContentTypesItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *ArchivesearchrequestrequestContentTypesItems) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = ArchivesearchrequestrequestContentTypesItems(v)
	return nil
}

// Message sender role
// 
// * `user` - User
// * `assistant` - Assistant
// * `system` - System
type ChatmessageRole string

const (
	// ChatmessageRoleUser
	ChatmessageRoleUser ChatmessageRole = "user"
	// ChatmessageRoleAssistant
	ChatmessageRoleAssistant ChatmessageRole = "assistant"
	// ChatmessageRoleSystem
	ChatmessageRoleSystem ChatmessageRole = "system"
)

// String returns string representation of ChatmessageRole.
func (e ChatmessageRole) String() string {
	switch e {
	case ChatmessageRoleUser:
		return "ChatmessageRoleUser"
	case ChatmessageRoleAssistant:
		return "ChatmessageRoleAssistant"
	case ChatmessageRoleSystem:
		return "ChatmessageRoleSystem"
	default:
		return fmt.Sprintf("ChatmessageRole(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e ChatmessageRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *ChatmessageRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = ChatmessageRole(v)
	return nil
}

// Archive format
// 
// * `zip` - ZIP
// * `tar` - TAR
// * `tar.gz` - TAR GZ
// * `tar.bz2` - TAR BZ2
type DocumentarchiveArchiveType string

const (
	// DocumentarchiveArchiveTypeZip
	DocumentarchiveArchiveTypeZip DocumentarchiveArchiveType = "zip"
	// DocumentarchiveArchiveTypeTar
	DocumentarchiveArchiveTypeTar DocumentarchiveArchiveType = "tar"
	// DocumentarchiveArchiveTypeTargz
	DocumentarchiveArchiveTypeTargz DocumentarchiveArchiveType = "tar.gz"
	// DocumentarchiveArchiveTypeTarbz2
	DocumentarchiveArchiveTypeTarbz2 DocumentarchiveArchiveType = "tar.bz2"
)

// String returns string representation of DocumentarchiveArchiveType.
func (e DocumentarchiveArchiveType) String() string {
	switch e {
	case DocumentarchiveArchiveTypeZip:
		return "DocumentarchiveArchiveTypeZip"
	case DocumentarchiveArchiveTypeTar:
		return "DocumentarchiveArchiveTypeTar"
	case DocumentarchiveArchiveTypeTargz:
		return "DocumentarchiveArchiveTypeTargz"
	case DocumentarchiveArchiveTypeTarbz2:
		return "DocumentarchiveArchiveTypeTarbz2"
	default:
		return fmt.Sprintf("DocumentarchiveArchiveType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e DocumentarchiveArchiveType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *DocumentarchiveArchiveType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = DocumentarchiveArchiveType(v)
	return nil
}

// * `pending` - Pending
// * `processing` - Processing
// * `completed` - Completed
// * `failed` - Failed
// * `cancelled` - Cancelled
type DocumentarchiveProcessingStatus string

const (
	// DocumentarchiveProcessingStatusPending
	DocumentarchiveProcessingStatusPending DocumentarchiveProcessingStatus = "pending"
	// DocumentarchiveProcessingStatusProcessing
	DocumentarchiveProcessingStatusProcessing DocumentarchiveProcessingStatus = "processing"
	// DocumentarchiveProcessingStatusCompleted
	DocumentarchiveProcessingStatusCompleted DocumentarchiveProcessingStatus = "completed"
	// DocumentarchiveProcessingStatusFailed
	DocumentarchiveProcessingStatusFailed DocumentarchiveProcessingStatus = "failed"
	// DocumentarchiveProcessingStatusCancelled
	DocumentarchiveProcessingStatusCancelled DocumentarchiveProcessingStatus = "cancelled"
)

// String returns string representation of DocumentarchiveProcessingStatus.
func (e DocumentarchiveProcessingStatus) String() string {
	switch e {
	case DocumentarchiveProcessingStatusPending:
		return "DocumentarchiveProcessingStatusPending"
	case DocumentarchiveProcessingStatusProcessing:
		return "DocumentarchiveProcessingStatusProcessing"
	case DocumentarchiveProcessingStatusCompleted:
		return "DocumentarchiveProcessingStatusCompleted"
	case DocumentarchiveProcessingStatusFailed:
		return "DocumentarchiveProcessingStatusFailed"
	case DocumentarchiveProcessingStatusCancelled:
		return "DocumentarchiveProcessingStatusCancelled"
	default:
		return fmt.Sprintf("DocumentarchiveProcessingStatus(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e DocumentarchiveProcessingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *DocumentarchiveProcessingStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = DocumentarchiveProcessingStatus(v)
	return nil
}

// Archive format
// 
// * `zip` - ZIP
// * `tar` - TAR
// * `tar.gz` - TAR GZ
// * `tar.bz2` - TAR BZ2
type DocumentarchivedetailArchiveType string

const (
	// DocumentarchivedetailArchiveTypeZip
	DocumentarchivedetailArchiveTypeZip DocumentarchivedetailArchiveType = "zip"
	// DocumentarchivedetailArchiveTypeTar
	DocumentarchivedetailArchiveTypeTar DocumentarchivedetailArchiveType = "tar"
	// DocumentarchivedetailArchiveTypeTargz
	DocumentarchivedetailArchiveTypeTargz DocumentarchivedetailArchiveType = "tar.gz"
	// DocumentarchivedetailArchiveTypeTarbz2
	DocumentarchivedetailArchiveTypeTarbz2 DocumentarchivedetailArchiveType = "tar.bz2"
)

// String returns string representation of DocumentarchivedetailArchiveType.
func (e DocumentarchivedetailArchiveType) String() string {
	switch e {
	case DocumentarchivedetailArchiveTypeZip:
		return "DocumentarchivedetailArchiveTypeZip"
	case DocumentarchivedetailArchiveTypeTar:
		return "DocumentarchivedetailArchiveTypeTar"
	case DocumentarchivedetailArchiveTypeTargz:
		return "DocumentarchivedetailArchiveTypeTargz"
	case DocumentarchivedetailArchiveTypeTarbz2:
		return "DocumentarchivedetailArchiveTypeTarbz2"
	default:
		return fmt.Sprintf("DocumentarchivedetailArchiveType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e DocumentarchivedetailArchiveType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *DocumentarchivedetailArchiveType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = DocumentarchivedetailArchiveType(v)
	return nil
}

// * `pending` - Pending
// * `processing` - Processing
// * `completed` - Completed
// * `failed` - Failed
// * `cancelled` - Cancelled
type DocumentarchivedetailProcessingStatus string

const (
	// DocumentarchivedetailProcessingStatusPending
	DocumentarchivedetailProcessingStatusPending DocumentarchivedetailProcessingStatus = "pending"
	// DocumentarchivedetailProcessingStatusProcessing
	DocumentarchivedetailProcessingStatusProcessing DocumentarchivedetailProcessingStatus = "processing"
	// DocumentarchivedetailProcessingStatusCompleted
	DocumentarchivedetailProcessingStatusCompleted DocumentarchivedetailProcessingStatus = "completed"
	// DocumentarchivedetailProcessingStatusFailed
	DocumentarchivedetailProcessingStatusFailed DocumentarchivedetailProcessingStatus = "failed"
	// DocumentarchivedetailProcessingStatusCancelled
	DocumentarchivedetailProcessingStatusCancelled DocumentarchivedetailProcessingStatus = "cancelled"
)

// String returns string representation of DocumentarchivedetailProcessingStatus.
func (e DocumentarchivedetailProcessingStatus) String() string {
	switch e {
	case DocumentarchivedetailProcessingStatusPending:
		return "DocumentarchivedetailProcessingStatusPending"
	case DocumentarchivedetailProcessingStatusProcessing:
		return "DocumentarchivedetailProcessingStatusProcessing"
	case DocumentarchivedetailProcessingStatusCompleted:
		return "DocumentarchivedetailProcessingStatusCompleted"
	case DocumentarchivedetailProcessingStatusFailed:
		return "DocumentarchivedetailProcessingStatusFailed"
	case DocumentarchivedetailProcessingStatusCancelled:
		return "DocumentarchivedetailProcessingStatusCancelled"
	default:
		return fmt.Sprintf("DocumentarchivedetailProcessingStatus(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e DocumentarchivedetailProcessingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *DocumentarchivedetailProcessingStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = DocumentarchivedetailProcessingStatus(v)
	return nil
}

// Archive format
// 
// * `zip` - ZIP
// * `tar` - TAR
// * `tar.gz` - TAR GZ
// * `tar.bz2` - TAR BZ2
type DocumentarchivelistArchiveType string

const (
	// DocumentarchivelistArchiveTypeZip
	DocumentarchivelistArchiveTypeZip DocumentarchivelistArchiveType = "zip"
	// DocumentarchivelistArchiveTypeTar
	DocumentarchivelistArchiveTypeTar DocumentarchivelistArchiveType = "tar"
	// DocumentarchivelistArchiveTypeTargz
	DocumentarchivelistArchiveTypeTargz DocumentarchivelistArchiveType = "tar.gz"
	// DocumentarchivelistArchiveTypeTarbz2
	DocumentarchivelistArchiveTypeTarbz2 DocumentarchivelistArchiveType = "tar.bz2"
)

// String returns string representation of DocumentarchivelistArchiveType.
func (e DocumentarchivelistArchiveType) String() string {
	switch e {
	case DocumentarchivelistArchiveTypeZip:
		return "DocumentarchivelistArchiveTypeZip"
	case DocumentarchivelistArchiveTypeTar:
		return "DocumentarchivelistArchiveTypeTar"
	case DocumentarchivelistArchiveTypeTargz:
		return "DocumentarchivelistArchiveTypeTargz"
	case DocumentarchivelistArchiveTypeTarbz2:
		return "DocumentarchivelistArchiveTypeTarbz2"
	default:
		return fmt.Sprintf("DocumentarchivelistArchiveType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e DocumentarchivelistArchiveType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *DocumentarchivelistArchiveType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = DocumentarchivelistArchiveType(v)
	return nil
}

// * `pending` - Pending
// * `processing` - Processing
// * `completed` - Completed
// * `failed` - Failed
// * `cancelled` - Cancelled
type DocumentarchivelistProcessingStatus string

const (
	// DocumentarchivelistProcessingStatusPending
	DocumentarchivelistProcessingStatusPending DocumentarchivelistProcessingStatus = "pending"
	// DocumentarchivelistProcessingStatusProcessing
	DocumentarchivelistProcessingStatusProcessing DocumentarchivelistProcessingStatus = "processing"
	// DocumentarchivelistProcessingStatusCompleted
	DocumentarchivelistProcessingStatusCompleted DocumentarchivelistProcessingStatus = "completed"
	// DocumentarchivelistProcessingStatusFailed
	DocumentarchivelistProcessingStatusFailed DocumentarchivelistProcessingStatus = "failed"
	// DocumentarchivelistProcessingStatusCancelled
	DocumentarchivelistProcessingStatusCancelled DocumentarchivelistProcessingStatus = "cancelled"
)

// String returns string representation of DocumentarchivelistProcessingStatus.
func (e DocumentarchivelistProcessingStatus) String() string {
	switch e {
	case DocumentarchivelistProcessingStatusPending:
		return "DocumentarchivelistProcessingStatusPending"
	case DocumentarchivelistProcessingStatusProcessing:
		return "DocumentarchivelistProcessingStatusProcessing"
	case DocumentarchivelistProcessingStatusCompleted:
		return "DocumentarchivelistProcessingStatusCompleted"
	case DocumentarchivelistProcessingStatusFailed:
		return "DocumentarchivelistProcessingStatusFailed"
	case DocumentarchivelistProcessingStatusCancelled:
		return "DocumentarchivelistProcessingStatusCancelled"
	default:
		return fmt.Sprintf("DocumentarchivelistProcessingStatus(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e DocumentarchivelistProcessingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *DocumentarchivelistProcessingStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = DocumentarchivelistProcessingStatus(v)
	return nil
}

// * `pending` - Pending
// * `sent` - Sent
// * `failed` - Failed
type EmaillogStatus string

const (
	// EmaillogStatusPending
	EmaillogStatusPending EmaillogStatus = "pending"
	// EmaillogStatusSent
	EmaillogStatusSent EmaillogStatus = "sent"
	// EmaillogStatusFailed
	EmaillogStatusFailed EmaillogStatus = "failed"
)

// String returns string representation of EmaillogStatus.
func (e EmaillogStatus) String() string {
	switch e {
	case EmaillogStatusPending:
		return "EmaillogStatusPending"
	case EmaillogStatusSent:
		return "EmaillogStatusSent"
	case EmaillogStatusFailed:
		return "EmaillogStatusFailed"
	default:
		return fmt.Sprintf("EmaillogStatus(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e EmaillogStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *EmaillogStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = EmaillogStatus(v)
	return nil
}

// * `email` - Email
// * `whatsapp` - WhatsApp
// * `telegram` - Telegram
// * `phone` - Phone
// * `other` - Other
type LeadsubmissionContactType string

const (
	// LeadsubmissionContactTypeEmail
	LeadsubmissionContactTypeEmail LeadsubmissionContactType = "email"
	// LeadsubmissionContactTypeWhatsapp
	LeadsubmissionContactTypeWhatsapp LeadsubmissionContactType = "whatsapp"
	// LeadsubmissionContactTypeTelegram
	LeadsubmissionContactTypeTelegram LeadsubmissionContactType = "telegram"
	// LeadsubmissionContactTypePhone
	LeadsubmissionContactTypePhone LeadsubmissionContactType = "phone"
	// LeadsubmissionContactTypeOther
	LeadsubmissionContactTypeOther LeadsubmissionContactType = "other"
)

// String returns string representation of LeadsubmissionContactType.
func (e LeadsubmissionContactType) String() string {
	switch e {
	case LeadsubmissionContactTypeEmail:
		return "LeadsubmissionContactTypeEmail"
	case LeadsubmissionContactTypeWhatsapp:
		return "LeadsubmissionContactTypeWhatsapp"
	case LeadsubmissionContactTypeTelegram:
		return "LeadsubmissionContactTypeTelegram"
	case LeadsubmissionContactTypePhone:
		return "LeadsubmissionContactTypePhone"
	case LeadsubmissionContactTypeOther:
		return "LeadsubmissionContactTypeOther"
	default:
		return fmt.Sprintf("LeadsubmissionContactType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e LeadsubmissionContactType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *LeadsubmissionContactType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = LeadsubmissionContactType(v)
	return nil
}

// * `email` - Email
// * `whatsapp` - WhatsApp
// * `telegram` - Telegram
// * `phone` - Phone
// * `other` - Other
type LeadsubmissionrequestContactType string

const (
	// LeadsubmissionrequestContactTypeEmail
	LeadsubmissionrequestContactTypeEmail LeadsubmissionrequestContactType = "email"
	// LeadsubmissionrequestContactTypeWhatsapp
	LeadsubmissionrequestContactTypeWhatsapp LeadsubmissionrequestContactType = "whatsapp"
	// LeadsubmissionrequestContactTypeTelegram
	LeadsubmissionrequestContactTypeTelegram LeadsubmissionrequestContactType = "telegram"
	// LeadsubmissionrequestContactTypePhone
	LeadsubmissionrequestContactTypePhone LeadsubmissionrequestContactType = "phone"
	// LeadsubmissionrequestContactTypeOther
	LeadsubmissionrequestContactTypeOther LeadsubmissionrequestContactType = "other"
)

// String returns string representation of LeadsubmissionrequestContactType.
func (e LeadsubmissionrequestContactType) String() string {
	switch e {
	case LeadsubmissionrequestContactTypeEmail:
		return "LeadsubmissionrequestContactTypeEmail"
	case LeadsubmissionrequestContactTypeWhatsapp:
		return "LeadsubmissionrequestContactTypeWhatsapp"
	case LeadsubmissionrequestContactTypeTelegram:
		return "LeadsubmissionrequestContactTypeTelegram"
	case LeadsubmissionrequestContactTypePhone:
		return "LeadsubmissionrequestContactTypePhone"
	case LeadsubmissionrequestContactTypeOther:
		return "LeadsubmissionrequestContactTypeOther"
	default:
		return fmt.Sprintf("LeadsubmissionrequestContactType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e LeadsubmissionrequestContactType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *LeadsubmissionrequestContactType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = LeadsubmissionrequestContactType(v)
	return nil
}

// * `draft` - Draft
// * `sending` - Sending
// * `sent` - Sent
// * `failed` - Failed
type NewslettercampaignStatus string

const (
	// NewslettercampaignStatusDraft
	NewslettercampaignStatusDraft NewslettercampaignStatus = "draft"
	// NewslettercampaignStatusSending
	NewslettercampaignStatusSending NewslettercampaignStatus = "sending"
	// NewslettercampaignStatusSent
	NewslettercampaignStatusSent NewslettercampaignStatus = "sent"
	// NewslettercampaignStatusFailed
	NewslettercampaignStatusFailed NewslettercampaignStatus = "failed"
)

// String returns string representation of NewslettercampaignStatus.
func (e NewslettercampaignStatus) String() string {
	switch e {
	case NewslettercampaignStatusDraft:
		return "NewslettercampaignStatusDraft"
	case NewslettercampaignStatusSending:
		return "NewslettercampaignStatusSending"
	case NewslettercampaignStatusSent:
		return "NewslettercampaignStatusSent"
	case NewslettercampaignStatusFailed:
		return "NewslettercampaignStatusFailed"
	default:
		return fmt.Sprintf("NewslettercampaignStatus(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e NewslettercampaignStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *NewslettercampaignStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = NewslettercampaignStatus(v)
	return nil
}

// Delivery channel: 'email' or 'phone'. Auto-detected if not provided.
// 
// * `email` - Email
// * `phone` - Phone
type OtprequestrequestChannel string

const (
	// OtprequestrequestChannelEmail
	OtprequestrequestChannelEmail OtprequestrequestChannel = "email"
	// OtprequestrequestChannelPhone
	OtprequestrequestChannelPhone OtprequestrequestChannel = "phone"
)

// String returns string representation of OtprequestrequestChannel.
func (e OtprequestrequestChannel) String() string {
	switch e {
	case OtprequestrequestChannelEmail:
		return "OtprequestrequestChannelEmail"
	case OtprequestrequestChannelPhone:
		return "OtprequestrequestChannelPhone"
	default:
		return fmt.Sprintf("OtprequestrequestChannel(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e OtprequestrequestChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *OtprequestrequestChannel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = OtprequestrequestChannel(v)
	return nil
}

// Delivery channel: 'email' or 'phone'. Auto-detected if not provided.
// 
// * `email` - Email
// * `phone` - Phone
type OtpverifyrequestChannel string

const (
	// OtpverifyrequestChannelEmail
	OtpverifyrequestChannelEmail OtpverifyrequestChannel = "email"
	// OtpverifyrequestChannelPhone
	OtpverifyrequestChannelPhone OtpverifyrequestChannel = "phone"
)

// String returns string representation of OtpverifyrequestChannel.
func (e OtpverifyrequestChannel) String() string {
	switch e {
	case OtpverifyrequestChannelEmail:
		return "OtpverifyrequestChannelEmail"
	case OtpverifyrequestChannelPhone:
		return "OtpverifyrequestChannelPhone"
	default:
		return fmt.Sprintf("OtpverifyrequestChannel(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e OtpverifyrequestChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *OtpverifyrequestChannel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = OtpverifyrequestChannel(v)
	return nil
}

// Type of content in chunk
// 
// * `text` - Text
// * `code` - Code
// * `heading` - Heading
// * `metadata` - Metadata
// * `table` - Table
// * `list` - List
type PatchedarchiveitemchunkrequestChunkType string

const (
	// PatchedarchiveitemchunkrequestChunkTypeText
	PatchedarchiveitemchunkrequestChunkTypeText PatchedarchiveitemchunkrequestChunkType = "text"
	// PatchedarchiveitemchunkrequestChunkTypeCode
	PatchedarchiveitemchunkrequestChunkTypeCode PatchedarchiveitemchunkrequestChunkType = "code"
	// PatchedarchiveitemchunkrequestChunkTypeHeading
	PatchedarchiveitemchunkrequestChunkTypeHeading PatchedarchiveitemchunkrequestChunkType = "heading"
	// PatchedarchiveitemchunkrequestChunkTypeMetadata
	PatchedarchiveitemchunkrequestChunkTypeMetadata PatchedarchiveitemchunkrequestChunkType = "metadata"
	// PatchedarchiveitemchunkrequestChunkTypeTable
	PatchedarchiveitemchunkrequestChunkTypeTable PatchedarchiveitemchunkrequestChunkType = "table"
	// PatchedarchiveitemchunkrequestChunkTypeList
	PatchedarchiveitemchunkrequestChunkTypeList PatchedarchiveitemchunkrequestChunkType = "list"
)

// String returns string representation of PatchedarchiveitemchunkrequestChunkType.
func (e PatchedarchiveitemchunkrequestChunkType) String() string {
	switch e {
	case PatchedarchiveitemchunkrequestChunkTypeText:
		return "PatchedarchiveitemchunkrequestChunkTypeText"
	case PatchedarchiveitemchunkrequestChunkTypeCode:
		return "PatchedarchiveitemchunkrequestChunkTypeCode"
	case PatchedarchiveitemchunkrequestChunkTypeHeading:
		return "PatchedarchiveitemchunkrequestChunkTypeHeading"
	case PatchedarchiveitemchunkrequestChunkTypeMetadata:
		return "PatchedarchiveitemchunkrequestChunkTypeMetadata"
	case PatchedarchiveitemchunkrequestChunkTypeTable:
		return "PatchedarchiveitemchunkrequestChunkTypeTable"
	case PatchedarchiveitemchunkrequestChunkTypeList:
		return "PatchedarchiveitemchunkrequestChunkTypeList"
	default:
		return fmt.Sprintf("PatchedarchiveitemchunkrequestChunkType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e PatchedarchiveitemchunkrequestChunkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *PatchedarchiveitemchunkrequestChunkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = PatchedarchiveitemchunkrequestChunkType(v)
	return nil
}

// * `email` - Email
// * `whatsapp` - WhatsApp
// * `telegram` - Telegram
// * `phone` - Phone
// * `other` - Other
type PatchedleadsubmissionrequestContactType string

const (
	// PatchedleadsubmissionrequestContactTypeEmail
	PatchedleadsubmissionrequestContactTypeEmail PatchedleadsubmissionrequestContactType = "email"
	// PatchedleadsubmissionrequestContactTypeWhatsapp
	PatchedleadsubmissionrequestContactTypeWhatsapp PatchedleadsubmissionrequestContactType = "whatsapp"
	// PatchedleadsubmissionrequestContactTypeTelegram
	PatchedleadsubmissionrequestContactTypeTelegram PatchedleadsubmissionrequestContactType = "telegram"
	// PatchedleadsubmissionrequestContactTypePhone
	PatchedleadsubmissionrequestContactTypePhone PatchedleadsubmissionrequestContactType = "phone"
	// PatchedleadsubmissionrequestContactTypeOther
	PatchedleadsubmissionrequestContactTypeOther PatchedleadsubmissionrequestContactType = "other"
)

// String returns string representation of PatchedleadsubmissionrequestContactType.
func (e PatchedleadsubmissionrequestContactType) String() string {
	switch e {
	case PatchedleadsubmissionrequestContactTypeEmail:
		return "PatchedleadsubmissionrequestContactTypeEmail"
	case PatchedleadsubmissionrequestContactTypeWhatsapp:
		return "PatchedleadsubmissionrequestContactTypeWhatsapp"
	case PatchedleadsubmissionrequestContactTypeTelegram:
		return "PatchedleadsubmissionrequestContactTypeTelegram"
	case PatchedleadsubmissionrequestContactTypePhone:
		return "PatchedleadsubmissionrequestContactTypePhone"
	case PatchedleadsubmissionrequestContactTypeOther:
		return "PatchedleadsubmissionrequestContactTypeOther"
	default:
		return fmt.Sprintf("PatchedleadsubmissionrequestContactType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e PatchedleadsubmissionrequestContactType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *PatchedleadsubmissionrequestContactType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = PatchedleadsubmissionrequestContactType(v)
	return nil
}

// * `open` - Open
// * `waiting_for_user` - Waiting for User
// * `waiting_for_admin` - Waiting for Admin
// * `resolved` - Resolved
// * `closed` - Closed
type PatchedticketrequestStatus string

const (
	// PatchedticketrequestStatusOpen
	PatchedticketrequestStatusOpen PatchedticketrequestStatus = "open"
	// PatchedticketrequestStatusWaitingForUser
	PatchedticketrequestStatusWaitingForUser PatchedticketrequestStatus = "waiting_for_user"
	// PatchedticketrequestStatusWaitingForAdmin
	PatchedticketrequestStatusWaitingForAdmin PatchedticketrequestStatus = "waiting_for_admin"
	// PatchedticketrequestStatusResolved
	PatchedticketrequestStatusResolved PatchedticketrequestStatus = "resolved"
	// PatchedticketrequestStatusClosed
	PatchedticketrequestStatusClosed PatchedticketrequestStatus = "closed"
)

// String returns string representation of PatchedticketrequestStatus.
func (e PatchedticketrequestStatus) String() string {
	switch e {
	case PatchedticketrequestStatusOpen:
		return "PatchedticketrequestStatusOpen"
	case PatchedticketrequestStatusWaitingForUser:
		return "PatchedticketrequestStatusWaitingForUser"
	case PatchedticketrequestStatusWaitingForAdmin:
		return "PatchedticketrequestStatusWaitingForAdmin"
	case PatchedticketrequestStatusResolved:
		return "PatchedticketrequestStatusResolved"
	case PatchedticketrequestStatusClosed:
		return "PatchedticketrequestStatusClosed"
	default:
		return fmt.Sprintf("PatchedticketrequestStatus(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e PatchedticketrequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *PatchedticketrequestStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = PatchedticketrequestStatus(v)
	return nil
}

// Current payment status
// 
// * `pending` - Pending
// * `confirming` - Confirming
// * `confirmed` - Confirmed
// * `completed` - Completed
// * `partially_paid` - Partially Paid
// * `failed` - Failed
// * `expired` - Expired
// * `cancelled` - Cancelled
type PaymentdetailStatus string

const (
	// PaymentdetailStatusPending
	PaymentdetailStatusPending PaymentdetailStatus = "pending"
	// PaymentdetailStatusConfirming
	PaymentdetailStatusConfirming PaymentdetailStatus = "confirming"
	// PaymentdetailStatusConfirmed
	PaymentdetailStatusConfirmed PaymentdetailStatus = "confirmed"
	// PaymentdetailStatusCompleted
	PaymentdetailStatusCompleted PaymentdetailStatus = "completed"
	// PaymentdetailStatusPartiallyPaID
	PaymentdetailStatusPartiallyPaID PaymentdetailStatus = "partially_paid"
	// PaymentdetailStatusFailed
	PaymentdetailStatusFailed PaymentdetailStatus = "failed"
	// PaymentdetailStatusExpired
	PaymentdetailStatusExpired PaymentdetailStatus = "expired"
	// PaymentdetailStatusCancelled
	PaymentdetailStatusCancelled PaymentdetailStatus = "cancelled"
)

// String returns string representation of PaymentdetailStatus.
func (e PaymentdetailStatus) String() string {
	switch e {
	case PaymentdetailStatusPending:
		return "PaymentdetailStatusPending"
	case PaymentdetailStatusConfirming:
		return "PaymentdetailStatusConfirming"
	case PaymentdetailStatusConfirmed:
		return "PaymentdetailStatusConfirmed"
	case PaymentdetailStatusCompleted:
		return "PaymentdetailStatusCompleted"
	case PaymentdetailStatusPartiallyPaID:
		return "PaymentdetailStatusPartiallyPaID"
	case PaymentdetailStatusFailed:
		return "PaymentdetailStatusFailed"
	case PaymentdetailStatusExpired:
		return "PaymentdetailStatusExpired"
	case PaymentdetailStatusCancelled:
		return "PaymentdetailStatusCancelled"
	default:
		return fmt.Sprintf("PaymentdetailStatus(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e PaymentdetailStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *PaymentdetailStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = PaymentdetailStatus(v)
	return nil
}

// Current payment status
// 
// * `pending` - Pending
// * `confirming` - Confirming
// * `confirmed` - Confirmed
// * `completed` - Completed
// * `partially_paid` - Partially Paid
// * `failed` - Failed
// * `expired` - Expired
// * `cancelled` - Cancelled
type PaymentlistStatus string

const (
	// PaymentlistStatusPending
	PaymentlistStatusPending PaymentlistStatus = "pending"
	// PaymentlistStatusConfirming
	PaymentlistStatusConfirming PaymentlistStatus = "confirming"
	// PaymentlistStatusConfirmed
	PaymentlistStatusConfirmed PaymentlistStatus = "confirmed"
	// PaymentlistStatusCompleted
	PaymentlistStatusCompleted PaymentlistStatus = "completed"
	// PaymentlistStatusPartiallyPaID
	PaymentlistStatusPartiallyPaID PaymentlistStatus = "partially_paid"
	// PaymentlistStatusFailed
	PaymentlistStatusFailed PaymentlistStatus = "failed"
	// PaymentlistStatusExpired
	PaymentlistStatusExpired PaymentlistStatus = "expired"
	// PaymentlistStatusCancelled
	PaymentlistStatusCancelled PaymentlistStatus = "cancelled"
)

// String returns string representation of PaymentlistStatus.
func (e PaymentlistStatus) String() string {
	switch e {
	case PaymentlistStatusPending:
		return "PaymentlistStatusPending"
	case PaymentlistStatusConfirming:
		return "PaymentlistStatusConfirming"
	case PaymentlistStatusConfirmed:
		return "PaymentlistStatusConfirmed"
	case PaymentlistStatusCompleted:
		return "PaymentlistStatusCompleted"
	case PaymentlistStatusPartiallyPaID:
		return "PaymentlistStatusPartiallyPaID"
	case PaymentlistStatusFailed:
		return "PaymentlistStatusFailed"
	case PaymentlistStatusExpired:
		return "PaymentlistStatusExpired"
	case PaymentlistStatusCancelled:
		return "PaymentlistStatusCancelled"
	default:
		return fmt.Sprintf("PaymentlistStatus(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e PaymentlistStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *PaymentlistStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = PaymentlistStatus(v)
	return nil
}

// Action to perform on queues
// 
// * `clear` - clear
// * `clear_all` - clear_all
// * `purge` - purge
// * `purge_failed` - purge_failed
// * `flush` - flush
type QueueactionAction string

const (
	// QueueactionActionClear
	QueueactionActionClear QueueactionAction = "clear"
	// QueueactionActionClearAll
	QueueactionActionClearAll QueueactionAction = "clear_all"
	// QueueactionActionPurge
	QueueactionActionPurge QueueactionAction = "purge"
	// QueueactionActionPurgeFailed
	QueueactionActionPurgeFailed QueueactionAction = "purge_failed"
	// QueueactionActionFlush
	QueueactionActionFlush QueueactionAction = "flush"
)

// String returns string representation of QueueactionAction.
func (e QueueactionAction) String() string {
	switch e {
	case QueueactionActionClear:
		return "QueueactionActionClear"
	case QueueactionActionClearAll:
		return "QueueactionActionClearAll"
	case QueueactionActionPurge:
		return "QueueactionActionPurge"
	case QueueactionActionPurgeFailed:
		return "QueueactionActionPurgeFailed"
	case QueueactionActionFlush:
		return "QueueactionActionFlush"
	default:
		return fmt.Sprintf("QueueactionAction(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e QueueactionAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *QueueactionAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = QueueactionAction(v)
	return nil
}

// Action to perform on queues
// 
// * `clear` - clear
// * `clear_all` - clear_all
// * `purge` - purge
// * `purge_failed` - purge_failed
// * `flush` - flush
type QueueactionrequestAction string

const (
	// QueueactionrequestActionClear
	QueueactionrequestActionClear QueueactionrequestAction = "clear"
	// QueueactionrequestActionClearAll
	QueueactionrequestActionClearAll QueueactionrequestAction = "clear_all"
	// QueueactionrequestActionPurge
	QueueactionrequestActionPurge QueueactionrequestAction = "purge"
	// QueueactionrequestActionPurgeFailed
	QueueactionrequestActionPurgeFailed QueueactionrequestAction = "purge_failed"
	// QueueactionrequestActionFlush
	QueueactionrequestActionFlush QueueactionrequestAction = "flush"
)

// String returns string representation of QueueactionrequestAction.
func (e QueueactionrequestAction) String() string {
	switch e {
	case QueueactionrequestActionClear:
		return "QueueactionrequestActionClear"
	case QueueactionrequestActionClearAll:
		return "QueueactionrequestActionClearAll"
	case QueueactionrequestActionPurge:
		return "QueueactionrequestActionPurge"
	case QueueactionrequestActionPurgeFailed:
		return "QueueactionrequestActionPurgeFailed"
	case QueueactionrequestActionFlush:
		return "QueueactionrequestActionFlush"
	default:
		return fmt.Sprintf("QueueactionrequestAction(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e QueueactionrequestAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *QueueactionrequestAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = QueueactionrequestAction(v)
	return nil
}

// Button color theme
// 
// * `primary` - primary
// * `success` - success
// * `warning` - warning
// * `danger` - danger
// * `secondary` - secondary
type QuickactionColor string

const (
	// QuickactionColorPrimary
	QuickactionColorPrimary QuickactionColor = "primary"
	// QuickactionColorSuccess
	QuickactionColorSuccess QuickactionColor = "success"
	// QuickactionColorWarning
	QuickactionColorWarning QuickactionColor = "warning"
	// QuickactionColorDanger
	QuickactionColorDanger QuickactionColor = "danger"
	// QuickactionColorSecondary
	QuickactionColorSecondary QuickactionColor = "secondary"
)

// String returns string representation of QuickactionColor.
func (e QuickactionColor) String() string {
	switch e {
	case QuickactionColorPrimary:
		return "QuickactionColorPrimary"
	case QuickactionColorSuccess:
		return "QuickactionColorSuccess"
	case QuickactionColorWarning:
		return "QuickactionColorWarning"
	case QuickactionColorDanger:
		return "QuickactionColorDanger"
	case QuickactionColorSecondary:
		return "QuickactionColorSecondary"
	default:
		return fmt.Sprintf("QuickactionColor(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e QuickactionColor) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *QuickactionColor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = QuickactionColor(v)
	return nil
}

// Change type
// 
// * `positive` - positive
// * `negative` - negative
// * `neutral` - neutral
type StatcardChangeType string

const (
	// StatcardChangeTypePositive
	StatcardChangeTypePositive StatcardChangeType = "positive"
	// StatcardChangeTypeNegative
	StatcardChangeTypeNegative StatcardChangeType = "negative"
	// StatcardChangeTypeNeutral
	StatcardChangeTypeNeutral StatcardChangeType = "neutral"
)

// String returns string representation of StatcardChangeType.
func (e StatcardChangeType) String() string {
	switch e {
	case StatcardChangeTypePositive:
		return "StatcardChangeTypePositive"
	case StatcardChangeTypeNegative:
		return "StatcardChangeTypeNegative"
	case StatcardChangeTypeNeutral:
		return "StatcardChangeTypeNeutral"
	default:
		return fmt.Sprintf("StatcardChangeType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e StatcardChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *StatcardChangeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = StatcardChangeType(v)
	return nil
}

// Overall system health status
// 
// * `healthy` - healthy
// * `warning` - warning
// * `error` - error
// * `unknown` - unknown
type SystemhealthOverallStatus string

const (
	// SystemhealthOverallStatusHealthy
	SystemhealthOverallStatusHealthy SystemhealthOverallStatus = "healthy"
	// SystemhealthOverallStatusWarning
	SystemhealthOverallStatusWarning SystemhealthOverallStatus = "warning"
	// SystemhealthOverallStatusError
	SystemhealthOverallStatusError SystemhealthOverallStatus = "error"
	// SystemhealthOverallStatusUnknown
	SystemhealthOverallStatusUnknown SystemhealthOverallStatus = "unknown"
)

// String returns string representation of SystemhealthOverallStatus.
func (e SystemhealthOverallStatus) String() string {
	switch e {
	case SystemhealthOverallStatusHealthy:
		return "SystemhealthOverallStatusHealthy"
	case SystemhealthOverallStatusWarning:
		return "SystemhealthOverallStatusWarning"
	case SystemhealthOverallStatusError:
		return "SystemhealthOverallStatusError"
	case SystemhealthOverallStatusUnknown:
		return "SystemhealthOverallStatusUnknown"
	default:
		return fmt.Sprintf("SystemhealthOverallStatus(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e SystemhealthOverallStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *SystemhealthOverallStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = SystemhealthOverallStatus(v)
	return nil
}

// Health status
// 
// * `healthy` - healthy
// * `warning` - warning
// * `error` - error
// * `unknown` - unknown
type SystemhealthitemStatus string

const (
	// SystemhealthitemStatusHealthy
	SystemhealthitemStatusHealthy SystemhealthitemStatus = "healthy"
	// SystemhealthitemStatusWarning
	SystemhealthitemStatusWarning SystemhealthitemStatus = "warning"
	// SystemhealthitemStatusError
	SystemhealthitemStatusError SystemhealthitemStatus = "error"
	// SystemhealthitemStatusUnknown
	SystemhealthitemStatusUnknown SystemhealthitemStatus = "unknown"
)

// String returns string representation of SystemhealthitemStatus.
func (e SystemhealthitemStatus) String() string {
	switch e {
	case SystemhealthitemStatusHealthy:
		return "SystemhealthitemStatusHealthy"
	case SystemhealthitemStatusWarning:
		return "SystemhealthitemStatusWarning"
	case SystemhealthitemStatusError:
		return "SystemhealthitemStatusError"
	case SystemhealthitemStatusUnknown:
		return "SystemhealthitemStatusUnknown"
	default:
		return fmt.Sprintf("SystemhealthitemStatus(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e SystemhealthitemStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *SystemhealthitemStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = SystemhealthitemStatus(v)
	return nil
}

// * `open` - Open
// * `waiting_for_user` - Waiting for User
// * `waiting_for_admin` - Waiting for Admin
// * `resolved` - Resolved
// * `closed` - Closed
type TicketStatus string

const (
	// TicketStatusOpen
	TicketStatusOpen TicketStatus = "open"
	// TicketStatusWaitingForUser
	TicketStatusWaitingForUser TicketStatus = "waiting_for_user"
	// TicketStatusWaitingForAdmin
	TicketStatusWaitingForAdmin TicketStatus = "waiting_for_admin"
	// TicketStatusResolved
	TicketStatusResolved TicketStatus = "resolved"
	// TicketStatusClosed
	TicketStatusClosed TicketStatus = "closed"
)

// String returns string representation of TicketStatus.
func (e TicketStatus) String() string {
	switch e {
	case TicketStatusOpen:
		return "TicketStatusOpen"
	case TicketStatusWaitingForUser:
		return "TicketStatusWaitingForUser"
	case TicketStatusWaitingForAdmin:
		return "TicketStatusWaitingForAdmin"
	case TicketStatusResolved:
		return "TicketStatusResolved"
	case TicketStatusClosed:
		return "TicketStatusClosed"
	default:
		return fmt.Sprintf("TicketStatus(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e TicketStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *TicketStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = TicketStatus(v)
	return nil
}

// * `open` - Open
// * `waiting_for_user` - Waiting for User
// * `waiting_for_admin` - Waiting for Admin
// * `resolved` - Resolved
// * `closed` - Closed
type TicketrequestStatus string

const (
	// TicketrequestStatusOpen
	TicketrequestStatusOpen TicketrequestStatus = "open"
	// TicketrequestStatusWaitingForUser
	TicketrequestStatusWaitingForUser TicketrequestStatus = "waiting_for_user"
	// TicketrequestStatusWaitingForAdmin
	TicketrequestStatusWaitingForAdmin TicketrequestStatus = "waiting_for_admin"
	// TicketrequestStatusResolved
	TicketrequestStatusResolved TicketrequestStatus = "resolved"
	// TicketrequestStatusClosed
	TicketrequestStatusClosed TicketrequestStatus = "closed"
)

// String returns string representation of TicketrequestStatus.
func (e TicketrequestStatus) String() string {
	switch e {
	case TicketrequestStatusOpen:
		return "TicketrequestStatusOpen"
	case TicketrequestStatusWaitingForUser:
		return "TicketrequestStatusWaitingForUser"
	case TicketrequestStatusWaitingForAdmin:
		return "TicketrequestStatusWaitingForAdmin"
	case TicketrequestStatusResolved:
		return "TicketrequestStatusResolved"
	case TicketrequestStatusClosed:
		return "TicketrequestStatusClosed"
	default:
		return fmt.Sprintf("TicketrequestStatus(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e TicketrequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *TicketrequestStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = TicketrequestStatus(v)
	return nil
}

// Type of transaction
// 
// * `deposit` - Deposit
// * `withdrawal` - Withdrawal
// * `payment` - Payment
// * `refund` - Refund
// * `fee` - Fee
// * `bonus` - Bonus
// * `adjustment` - Adjustment
type TransactionTransactionType string

const (
	// TransactionTransactionTypeDeposit
	TransactionTransactionTypeDeposit TransactionTransactionType = "deposit"
	// TransactionTransactionTypeWithdrawal
	TransactionTransactionTypeWithdrawal TransactionTransactionType = "withdrawal"
	// TransactionTransactionTypePayment
	TransactionTransactionTypePayment TransactionTransactionType = "payment"
	// TransactionTransactionTypeRefund
	TransactionTransactionTypeRefund TransactionTransactionType = "refund"
	// TransactionTransactionTypeFee
	TransactionTransactionTypeFee TransactionTransactionType = "fee"
	// TransactionTransactionTypeBonus
	TransactionTransactionTypeBonus TransactionTransactionType = "bonus"
	// TransactionTransactionTypeAdjustment
	TransactionTransactionTypeAdjustment TransactionTransactionType = "adjustment"
)

// String returns string representation of TransactionTransactionType.
func (e TransactionTransactionType) String() string {
	switch e {
	case TransactionTransactionTypeDeposit:
		return "TransactionTransactionTypeDeposit"
	case TransactionTransactionTypeWithdrawal:
		return "TransactionTransactionTypeWithdrawal"
	case TransactionTransactionTypePayment:
		return "TransactionTransactionTypePayment"
	case TransactionTransactionTypeRefund:
		return "TransactionTransactionTypeRefund"
	case TransactionTransactionTypeFee:
		return "TransactionTransactionTypeFee"
	case TransactionTransactionTypeBonus:
		return "TransactionTransactionTypeBonus"
	case TransactionTransactionTypeAdjustment:
		return "TransactionTransactionTypeAdjustment"
	default:
		return fmt.Sprintf("TransactionTransactionType(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e TransactionTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *TransactionTransactionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = TransactionTransactionType(v)
	return nil
}

// Action to perform on workers
// 
// * `start` - start
// * `stop` - stop
// * `restart` - restart
type WorkeractionAction string

const (
	// WorkeractionActionStart
	WorkeractionActionStart WorkeractionAction = "start"
	// WorkeractionActionStop
	WorkeractionActionStop WorkeractionAction = "stop"
	// WorkeractionActionRestart
	WorkeractionActionRestart WorkeractionAction = "restart"
)

// String returns string representation of WorkeractionAction.
func (e WorkeractionAction) String() string {
	switch e {
	case WorkeractionActionStart:
		return "WorkeractionActionStart"
	case WorkeractionActionStop:
		return "WorkeractionActionStop"
	case WorkeractionActionRestart:
		return "WorkeractionActionRestart"
	default:
		return fmt.Sprintf("WorkeractionAction(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e WorkeractionAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *WorkeractionAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = WorkeractionAction(v)
	return nil
}

// Action to perform on workers
// 
// * `start` - start
// * `stop` - stop
// * `restart` - restart
type WorkeractionrequestAction string

const (
	// WorkeractionrequestActionStart
	WorkeractionrequestActionStart WorkeractionrequestAction = "start"
	// WorkeractionrequestActionStop
	WorkeractionrequestActionStop WorkeractionrequestAction = "stop"
	// WorkeractionrequestActionRestart
	WorkeractionrequestActionRestart WorkeractionrequestAction = "restart"
)

// String returns string representation of WorkeractionrequestAction.
func (e WorkeractionrequestAction) String() string {
	switch e {
	case WorkeractionrequestActionStart:
		return "WorkeractionrequestActionStart"
	case WorkeractionrequestActionStop:
		return "WorkeractionrequestActionStop"
	case WorkeractionrequestActionRestart:
		return "WorkeractionrequestActionRestart"
	default:
		return fmt.Sprintf("WorkeractionrequestAction(%v)", string(e))
	}
}

// MarshalJSON implements json.Marshaler.
func (e WorkeractionrequestAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(e))
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *WorkeractionrequestAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*e = WorkeractionrequestAction(v)
	return nil
}

