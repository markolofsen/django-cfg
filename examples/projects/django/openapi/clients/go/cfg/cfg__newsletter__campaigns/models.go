// Code generated by django-cfg/django_client - DO NOT EDIT.
// Generated at: 2025-10-28T07:47:34.503919

package cfg__newsletter__campaigns

import (
	"cfg/types"
	"time"
)

// Generic error response.
type ErrorResponse struct {
	Success *bool `json:"success,omitempty"`
	Message string `json:"message"`
}

// Serializer for NewsletterCampaign model.
type NewsletterCampaign struct {
	ID int64 `json:"id"`
	Newsletter int64 `json:"newsletter"`
	NewsletterTitle string `json:"newsletter_title"`
	Subject string `json:"subject"`
	EmailTitle string `json:"email_title"`
	MainText string `json:"main_text"`
	MainHTMLContent *string `json:"main_html_content,omitempty"`
	ButtonText *string `json:"button_text,omitempty"`
	ButtonURL *string `json:"button_url,omitempty"`
	SecondaryText *string `json:"secondary_text,omitempty"`
	// * `draft` - Draft
	// * `sending` - Sending
	// * `sent` - Sent
	// * `failed` - Failed
	Status types.NewslettercampaignStatus `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	SentAt time.Time `json:"sent_at"`
	RecipientCount int64 `json:"recipient_count"`
}

// Serializer for NewsletterCampaign model.
type NewsletterCampaignRequest struct {
	Newsletter int64 `json:"newsletter"`
	Subject string `json:"subject"`
	EmailTitle string `json:"email_title"`
	MainText string `json:"main_text"`
	MainHTMLContent *string `json:"main_html_content,omitempty"`
	ButtonText *string `json:"button_text,omitempty"`
	ButtonURL *string `json:"button_url,omitempty"`
	SecondaryText *string `json:"secondary_text,omitempty"`
}

// PaginatedNewsletterCampaignList model.
type PaginatedNewsletterCampaignList struct {
	// Total number of items across all pages
	Count int64 `json:"count"`
	// Current page number (1-based)
	Page int64 `json:"page"`
	// Total number of pages
	Pages int64 `json:"pages"`
	// Number of items per page
	PageSize int64 `json:"page_size"`
	// Whether there is a next page
	HasNext bool `json:"has_next"`
	// Whether there is a previous page
	HasPrevious bool `json:"has_previous"`
	// Next page number (null if no next page)
	NextPage *int64 `json:"next_page,omitempty"`
	// Previous page number (null if no previous page)
	PreviousPage *int64 `json:"previous_page,omitempty"`
	// Array of items for current page
	Results []NewsletterCampaign `json:"results"`
}

// Simple serializer for sending campaign.
type SendCampaignRequest struct {
	CampaignID int64 `json:"campaign_id"`
}

// Response for sending campaign.
type SendCampaignResponse struct {
	Success bool `json:"success"`
	Message *string `json:"message,omitempty"`
	SentCount *int64 `json:"sent_count,omitempty"`
	Error *string `json:"error,omitempty"`
}

