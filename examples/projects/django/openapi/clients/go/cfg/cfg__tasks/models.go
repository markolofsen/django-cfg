// Code generated by django-cfg/django_client - DO NOT EDIT.
// Generated at: 2025-10-27T19:13:24.699544

package cfg__tasks

import (
	"cfg/types"
)

// Standard API response serializer.
type APIResponse struct {
	// Operation success status
	Success bool `json:"success"`
	// Success message
	Message *string `json:"message,omitempty"`
	// Error message
	Error *string `json:"error,omitempty"`
	// Response data
	Data map[string]interface{} `json:"data,omitempty"`
}

// Standard API response serializer.
type APIResponseRequest struct {
	// Operation success status
	Success bool `json:"success"`
	// Success message
	Message *string `json:"message,omitempty"`
	// Error message
	Error *string `json:"error,omitempty"`
	// Response data
	Data map[string]interface{} `json:"data,omitempty"`
}

// Serializer for queue management actions.
type QueueAction struct {
	// Action to perform on queues
	// 
	// * `clear` - clear
	// * `clear_all` - clear_all
	// * `purge` - purge
	// * `purge_failed` - purge_failed
	// * `flush` - flush
	Action types.QueueactionAction `json:"action"`
	// Specific queues to target (empty = all queues)
	QueueNames []string `json:"queue_names,omitempty"`
}

// Serializer for queue management actions.
type QueueActionRequest struct {
	// Action to perform on queues
	// 
	// * `clear` - clear
	// * `clear_all` - clear_all
	// * `purge` - purge
	// * `purge_failed` - purge_failed
	// * `flush` - flush
	Action types.QueueactionrequestAction `json:"action"`
	// Specific queues to target (empty = all queues)
	QueueNames []string `json:"queue_names,omitempty"`
}

// Serializer for queue status data.
type QueueStatus struct {
	// Queue information with pending/failed counts
	Queues map[string]interface{} `json:"queues"`
	// Number of active workers
	Workers int64 `json:"workers"`
	// Redis connection status
	RedisConnected bool `json:"redis_connected"`
	// Current timestamp
	Timestamp string `json:"timestamp"`
	// Error message if any
	Error *string `json:"error,omitempty"`
}

// Serializer for task statistics data.
type TaskStatistics struct {
	// Task count statistics
	Statistics map[string]interface{} `json:"statistics"`
	// List of recent tasks
	RecentTasks []map[string]interface{} `json:"recent_tasks"`
	// Current timestamp
	Timestamp string `json:"timestamp"`
	// Error message if any
	Error *string `json:"error,omitempty"`
}

// Serializer for worker management actions.
type WorkerAction struct {
	// Action to perform on workers
	// 
	// * `start` - start
	// * `stop` - stop
	// * `restart` - restart
	Action types.WorkeractionAction `json:"action"`
	// Number of worker processes
	Processes *int64 `json:"processes,omitempty"`
	// Number of threads per process
	Threads *int64 `json:"threads,omitempty"`
}

// Serializer for worker management actions.
type WorkerActionRequest struct {
	// Action to perform on workers
	// 
	// * `start` - start
	// * `stop` - stop
	// * `restart` - restart
	Action types.WorkeractionrequestAction `json:"action"`
	// Number of worker processes
	Processes *int64 `json:"processes,omitempty"`
	// Number of threads per process
	Threads *int64 `json:"threads,omitempty"`
}

