// Code generated by django-cfg/django_client - DO NOT EDIT.
// Generated at: 2025-10-27T19:13:24.699751

package cfg__tasks

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	// Import shared package for error types
	"cfg/shared"
)

// Client provides access to cfg__tasks operations.
type Client struct {
	BaseURL    string
	HTTPClient *http.Client
	Token      string
}

// NewClient creates a new cfg__tasks client.
func NewClient(baseURL string, httpClient *http.Client, token string) *Client {
	return &Client{
		BaseURL:    baseURL,
		HTTPClient: httpClient,
		Token:      token,
	}
}


// APIClearCreate - Clear all test data from Redis.
func (c *Client) APIClearCreate(ctx context.Context, body APIResponseRequest) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/tasks/api/clear/"


	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader
	bodyBytes, err := json.Marshal(body)
	if err != nil {
		return result, fmt.Errorf("failed to marshal request body: %w", err)
	}
	reqBody = bytes.NewReader(bodyBytes)

	// Create request
	req, err := http.NewRequestWithContext(ctx, "POST", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	req.Header.Set("Content-Type", "application/json")
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "POST",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "POST",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "POST", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// APIClearQueuesCreate - Clear all tasks from all Dramatiq queues.
func (c *Client) APIClearQueuesCreate(ctx context.Context, body APIResponseRequest) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/tasks/api/clear-queues/"


	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader
	bodyBytes, err := json.Marshal(body)
	if err != nil {
		return result, fmt.Errorf("failed to marshal request body: %w", err)
	}
	reqBody = bytes.NewReader(bodyBytes)

	// Create request
	req, err := http.NewRequestWithContext(ctx, "POST", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	req.Header.Set("Content-Type", "application/json")
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "POST",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "POST",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "POST", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// APIPurgeFailedCreate - Purge all failed tasks from queues.
func (c *Client) APIPurgeFailedCreate(ctx context.Context, body APIResponseRequest) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/tasks/api/purge-failed/"


	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader
	bodyBytes, err := json.Marshal(body)
	if err != nil {
		return result, fmt.Errorf("failed to marshal request body: %w", err)
	}
	reqBody = bytes.NewReader(bodyBytes)

	// Create request
	req, err := http.NewRequestWithContext(ctx, "POST", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	req.Header.Set("Content-Type", "application/json")
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "POST",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "POST",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "POST", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// APIQueuesManageCreate - Manage queue operations (clear, purge, etc.).
func (c *Client) APIQueuesManageCreate(ctx context.Context, body QueueActionRequest) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/tasks/api/queues/manage/"


	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader
	bodyBytes, err := json.Marshal(body)
	if err != nil {
		return result, fmt.Errorf("failed to marshal request body: %w", err)
	}
	reqBody = bytes.NewReader(bodyBytes)

	// Create request
	req, err := http.NewRequestWithContext(ctx, "POST", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	req.Header.Set("Content-Type", "application/json")
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "POST",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "POST",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "POST", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// APIQueuesStatusRetrieve - Get current status of all queues.
func (c *Client) APIQueuesStatusRetrieve(ctx context.Context) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/tasks/api/queues/status/"


	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader

	// Create request
	req, err := http.NewRequestWithContext(ctx, "GET", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "GET",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "GET",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "GET", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// APISimulateCreate - Simulate test data for dashboard testing.
func (c *Client) APISimulateCreate(ctx context.Context, body APIResponseRequest) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/tasks/api/simulate/"


	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader
	bodyBytes, err := json.Marshal(body)
	if err != nil {
		return result, fmt.Errorf("failed to marshal request body: %w", err)
	}
	reqBody = bytes.NewReader(bodyBytes)

	// Create request
	req, err := http.NewRequestWithContext(ctx, "POST", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	req.Header.Set("Content-Type", "application/json")
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "POST",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "POST",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "POST", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// APITasksListRetrieve - Get paginated task list with filtering.
func (c *Client) APITasksListRetrieve(ctx context.Context) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/tasks/api/tasks/list/"


	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader

	// Create request
	req, err := http.NewRequestWithContext(ctx, "GET", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "GET",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "GET",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "GET", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// APITasksStatsRetrieve - Get task execution statistics.
func (c *Client) APITasksStatsRetrieve(ctx context.Context) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/tasks/api/tasks/stats/"


	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader

	// Create request
	req, err := http.NewRequestWithContext(ctx, "GET", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "GET",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "GET",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "GET", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// APIWorkersListRetrieve - Get detailed list of workers.
func (c *Client) APIWorkersListRetrieve(ctx context.Context) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/tasks/api/workers/list/"


	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader

	// Create request
	req, err := http.NewRequestWithContext(ctx, "GET", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "GET",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "GET",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "GET", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// APIWorkersManageCreate - Manage worker operations.
func (c *Client) APIWorkersManageCreate(ctx context.Context, body WorkerActionRequest) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/tasks/api/workers/manage/"


	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader
	bodyBytes, err := json.Marshal(body)
	if err != nil {
		return result, fmt.Errorf("failed to marshal request body: %w", err)
	}
	reqBody = bytes.NewReader(bodyBytes)

	// Create request
	req, err := http.NewRequestWithContext(ctx, "POST", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	req.Header.Set("Content-Type", "application/json")
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "POST",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "POST",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "POST", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

