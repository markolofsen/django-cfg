// Code generated by django-cfg/django_client - DO NOT EDIT.
// Generated at: 2025-10-27T19:13:24.683734

package cfg__centrifugo__centrifugo_monitoring

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"

	// Import shared package for error types
	"cfg/shared"
)

// Client provides access to cfg__centrifugo__centrifugo_monitoring operations.
type Client struct {
	BaseURL    string
	HTTPClient *http.Client
	Token      string
}

// NewClient creates a new cfg__centrifugo__centrifugo_monitoring client.
func NewClient(baseURL string, httpClient *http.Client, token string) *Client {
	return &Client{
		BaseURL:    baseURL,
		HTTPClient: httpClient,
		Token:      token,
	}
}

// CentrifugoAdminAPIMonitorOverviewRetrieveParams contains query parameters for CentrifugoAdminAPIMonitorOverviewRetrieve.
type CentrifugoAdminAPIMonitorOverviewRetrieveParams struct {
	Hours int64 `json:"hours"`
}

// CentrifugoAdminAPIMonitorPublishesRetrieveParams contains query parameters for CentrifugoAdminAPIMonitorPublishesRetrieve.
type CentrifugoAdminAPIMonitorPublishesRetrieveParams struct {
	Channel string `json:"channel"`
	Count int64 `json:"count"`
	Offset int64 `json:"offset"`
	Status string `json:"status"`
}

// CentrifugoAdminAPIMonitorTimelineRetrieveParams contains query parameters for CentrifugoAdminAPIMonitorTimelineRetrieve.
type CentrifugoAdminAPIMonitorTimelineRetrieveParams struct {
	Hours int64 `json:"hours"`
	Interval string `json:"interval"`
}

// CentrifugoMonitorOverviewRetrieveParams contains query parameters for CentrifugoMonitorOverviewRetrieve.
type CentrifugoMonitorOverviewRetrieveParams struct {
	Hours int64 `json:"hours"`
}

// CentrifugoMonitorPublishesRetrieveParams contains query parameters for CentrifugoMonitorPublishesRetrieve.
type CentrifugoMonitorPublishesRetrieveParams struct {
	Channel string `json:"channel"`
	Count int64 `json:"count"`
	Offset int64 `json:"offset"`
	Status string `json:"status"`
}

// CentrifugoMonitorTimelineRetrieveParams contains query parameters for CentrifugoMonitorTimelineRetrieve.
type CentrifugoMonitorTimelineRetrieveParams struct {
	Hours int64 `json:"hours"`
	Interval string `json:"interval"`
}


// CentrifugoAdminAPIMonitorHealthRetrieve - Get Centrifugo health status
func (c *Client) CentrifugoAdminAPIMonitorHealthRetrieve(ctx context.Context) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/centrifugo/admin/api/monitor/health/"


	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader

	// Create request
	req, err := http.NewRequestWithContext(ctx, "GET", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "GET",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "GET",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "GET", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// CentrifugoAdminAPIMonitorOverviewRetrieve - Get overview statistics
func (c *Client) CentrifugoAdminAPIMonitorOverviewRetrieve(ctx context.Context, params *CentrifugoAdminAPIMonitorOverviewRetrieveParams) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/centrifugo/admin/api/monitor/overview/"

	// Add query parameters
	if params != nil {
		query := url.Values{}
		// TODO: Add query parameter marshaling based on struct fields
		path = path + "?" + query.Encode()
	}

	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader

	// Create request
	req, err := http.NewRequestWithContext(ctx, "GET", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "GET",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "GET",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "GET", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// CentrifugoAdminAPIMonitorPublishesRetrieve - Get recent publishes
func (c *Client) CentrifugoAdminAPIMonitorPublishesRetrieve(ctx context.Context, params *CentrifugoAdminAPIMonitorPublishesRetrieveParams) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/centrifugo/admin/api/monitor/publishes/"

	// Add query parameters
	if params != nil {
		query := url.Values{}
		// TODO: Add query parameter marshaling based on struct fields
		path = path + "?" + query.Encode()
	}

	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader

	// Create request
	req, err := http.NewRequestWithContext(ctx, "GET", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "GET",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "GET",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "GET", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// CentrifugoAdminAPIMonitorTimelineRetrieve - Get channel statistics
func (c *Client) CentrifugoAdminAPIMonitorTimelineRetrieve(ctx context.Context, params *CentrifugoAdminAPIMonitorTimelineRetrieveParams) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/centrifugo/admin/api/monitor/timeline/"

	// Add query parameters
	if params != nil {
		query := url.Values{}
		// TODO: Add query parameter marshaling based on struct fields
		path = path + "?" + query.Encode()
	}

	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader

	// Create request
	req, err := http.NewRequestWithContext(ctx, "GET", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "GET",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "GET",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "GET", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// CentrifugoMonitorHealthRetrieve - Get Centrifugo health status
func (c *Client) CentrifugoMonitorHealthRetrieve(ctx context.Context) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/centrifugo/monitor/health/"


	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader

	// Create request
	req, err := http.NewRequestWithContext(ctx, "GET", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "GET",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "GET",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "GET", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// CentrifugoMonitorOverviewRetrieve - Get overview statistics
func (c *Client) CentrifugoMonitorOverviewRetrieve(ctx context.Context, params *CentrifugoMonitorOverviewRetrieveParams) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/centrifugo/monitor/overview/"

	// Add query parameters
	if params != nil {
		query := url.Values{}
		// TODO: Add query parameter marshaling based on struct fields
		path = path + "?" + query.Encode()
	}

	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader

	// Create request
	req, err := http.NewRequestWithContext(ctx, "GET", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "GET",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "GET",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "GET", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// CentrifugoMonitorPublishesRetrieve - Get recent publishes
func (c *Client) CentrifugoMonitorPublishesRetrieve(ctx context.Context, params *CentrifugoMonitorPublishesRetrieveParams) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/centrifugo/monitor/publishes/"

	// Add query parameters
	if params != nil {
		query := url.Values{}
		// TODO: Add query parameter marshaling based on struct fields
		path = path + "?" + query.Encode()
	}

	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader

	// Create request
	req, err := http.NewRequestWithContext(ctx, "GET", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "GET",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "GET",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "GET", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

// CentrifugoMonitorTimelineRetrieve - Get channel statistics
func (c *Client) CentrifugoMonitorTimelineRetrieve(ctx context.Context, params *CentrifugoMonitorTimelineRetrieveParams) (interface{}, error) {
	var result interface{}

	// Build URL
	path := "/cfg/centrifugo/monitor/timeline/"

	// Add query parameters
	if params != nil {
		query := url.Values{}
		// TODO: Add query parameter marshaling based on struct fields
		path = path + "?" + query.Encode()
	}

	u := c.BaseURL + path

	// Prepare request body
	var reqBody io.Reader

	// Create request
	req, err := http.NewRequestWithContext(ctx, "GET", u, reqBody)
	if err != nil {
		return result, fmt.Errorf("failed to create request: %w", err)
	}

	// Set headers
	if c.Token != "" {
		req.Header.Set("Authorization", "Bearer "+c.Token)
	}

	// Execute request
	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    err,
			Method: "GET",
			URL:    u,
		}
	}
	defer resp.Body.Close()

	// Read response body
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return result, &shared.NetworkError{
			Err:    fmt.Errorf("failed to read response: %w", err),
			Method: "GET",
			URL:    u,
		}
	}

	// Check status code
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		return result, shared.ParseAPIError(resp.StatusCode, resp.Status, "GET", u, respBody)
	}

	// Decode response
	if err := json.Unmarshal(respBody, &result); err != nil {
		return result, &shared.UnmarshalError{
			Err:  err,
			Body: respBody,
			Type: "interface{}",
		}
	}

	return result, nil
}

