// Code generated by django-cfg/django_client - DO NOT EDIT.
// Generated at: 2025-10-27T19:13:24.698937

package cfg__support

import (
	"cfg/types"
	"time"
)

// Message model.
type Message struct {
	UUID string `json:"uuid"`
	Ticket string `json:"ticket"`
	Sender Sender `json:"sender"`
	// Check if this message is from the ticket author.
	IsFromAuthor bool `json:"is_from_author"`
	Text string `json:"text"`
	CreatedAt time.Time `json:"created_at"`
}

// MessageCreate model.
type MessageCreate struct {
	Text string `json:"text"`
}

// MessageCreateRequest model.
type MessageCreateRequest struct {
	Text string `json:"text"`
}

// MessageRequest model.
type MessageRequest struct {
	Text string `json:"text"`
}

// PaginatedMessageList model.
type PaginatedMessageList struct {
	// Total number of items across all pages
	Count int64 `json:"count"`
	// Current page number (1-based)
	Page int64 `json:"page"`
	// Total number of pages
	Pages int64 `json:"pages"`
	// Number of items per page
	PageSize int64 `json:"page_size"`
	// Whether there is a next page
	HasNext bool `json:"has_next"`
	// Whether there is a previous page
	HasPrevious bool `json:"has_previous"`
	// Next page number (null if no next page)
	NextPage *int64 `json:"next_page,omitempty"`
	// Previous page number (null if no previous page)
	PreviousPage *int64 `json:"previous_page,omitempty"`
	// Array of items for current page
	Results []Message `json:"results"`
}

// PaginatedTicketList model.
type PaginatedTicketList struct {
	// Total number of items across all pages
	Count int64 `json:"count"`
	// Current page number (1-based)
	Page int64 `json:"page"`
	// Total number of pages
	Pages int64 `json:"pages"`
	// Number of items per page
	PageSize int64 `json:"page_size"`
	// Whether there is a next page
	HasNext bool `json:"has_next"`
	// Whether there is a previous page
	HasPrevious bool `json:"has_previous"`
	// Next page number (null if no next page)
	NextPage *int64 `json:"next_page,omitempty"`
	// Previous page number (null if no previous page)
	PreviousPage *int64 `json:"previous_page,omitempty"`
	// Array of items for current page
	Results []Ticket `json:"results"`
}

// PatchedMessageRequest model.
type PatchedMessageRequest struct {
	Text *string `json:"text,omitempty"`
}

// PatchedTicketRequest model.
type PatchedTicketRequest struct {
	User *int64 `json:"user,omitempty"`
	Subject *string `json:"subject,omitempty"`
	// * `open` - Open
	// * `waiting_for_user` - Waiting for User
	// * `waiting_for_admin` - Waiting for Admin
	// * `resolved` - Resolved
	// * `closed` - Closed
	Status *types.PatchedticketrequestStatus `json:"status,omitempty"`
}

// Sender model.
type Sender struct {
	ID int64 `json:"id"`
	// Get formatted username for display.
	DisplayUsername string `json:"display_username"`
	Email string `json:"email"`
	Avatar string `json:"avatar"`
	// Get user's initials for avatar fallback.
	Initials string `json:"initials"`
	// Designates whether the user can log into this admin site.
	IsStaff bool `json:"is_staff"`
	// Designates that this user has all permissions without explicitly assigning them.
	IsSuperuser bool `json:"is_superuser"`
}

// Ticket model.
type Ticket struct {
	UUID string `json:"uuid"`
	User int64 `json:"user"`
	Subject string `json:"subject"`
	// * `open` - Open
	// * `waiting_for_user` - Waiting for User
	// * `waiting_for_admin` - Waiting for Admin
	// * `resolved` - Resolved
	// * `closed` - Closed
	Status *types.TicketStatus `json:"status,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	// Get count of unanswered messages for this specific ticket.
	UnansweredMessagesCount int64 `json:"unanswered_messages_count"`
}

// TicketRequest model.
type TicketRequest struct {
	User int64 `json:"user"`
	Subject string `json:"subject"`
	// * `open` - Open
	// * `waiting_for_user` - Waiting for User
	// * `waiting_for_admin` - Waiting for Admin
	// * `resolved` - Resolved
	// * `closed` - Closed
	Status *types.TicketrequestStatus `json:"status,omitempty"`
}

