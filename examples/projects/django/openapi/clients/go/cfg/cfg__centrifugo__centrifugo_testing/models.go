// Code generated by django-cfg/django_client - DO NOT EDIT.
// Generated at: 2025-10-28T07:47:34.507926

package cfg__centrifugo__centrifugo_testing


// Request model for connection token generation.
type ConnectionTokenRequestRequest struct {
	// User ID for the connection
	UserID string `json:"user_id"`
	// List of channels to authorize
	Channels []string `json:"channels,omitempty"`
}

// Response model for connection token.
type ConnectionTokenResponse struct {
	// JWT token for WebSocket connection
	Token string `json:"token"`
	// Centrifugo WebSocket URL
	CentrifugoURL string `json:"centrifugo_url"`
	// Token expiration time (ISO 8601)
	ExpiresAt string `json:"expires_at"`
}

// Request model for manual ACK sending.
type ManualAckRequestRequest struct {
	// Message ID to acknowledge
	MessageID string `json:"message_id"`
	// Client ID sending the ACK
	ClientID string `json:"client_id"`
}

// Response model for manual ACK.
type ManualAckResponse struct {
	// Whether ACK was sent successfully
	Success bool `json:"success"`
	// Message ID that was acknowledged
	MessageID string `json:"message_id"`
	// Error message if failed
	Error *string `json:"error,omitempty"`
}

// Request model for test message publishing.
type PublishTestRequestRequest struct {
	// Target channel name
	Channel string `json:"channel"`
	// Message data (any JSON object)
	Data map[string]interface{} `json:"data"`
	// Wait for client acknowledgment
	WaitForAck *bool `json:"wait_for_ack,omitempty"`
	// ACK timeout in seconds
	AckTimeout *int64 `json:"ack_timeout,omitempty"`
}

// Response model for test message publishing.
type PublishTestResponse struct {
	// Whether publish succeeded
	Success bool `json:"success"`
	// Unique message ID
	MessageID string `json:"message_id"`
	// Target channel
	Channel string `json:"channel"`
	// Number of ACKs received
	AcksReceived *int64 `json:"acks_received,omitempty"`
	// Whether message was delivered
	Delivered *bool `json:"delivered,omitempty"`
	// Error message if failed
	Error *string `json:"error,omitempty"`
}

