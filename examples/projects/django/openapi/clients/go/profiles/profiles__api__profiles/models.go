// Code generated by django-cfg/django_client - DO NOT EDIT.
// Generated at: 2025-10-27T19:13:23.812313

package profiles__api__profiles

import (
	"time"
)

// PaginatedUserProfileList model.
type PaginatedUserProfileList struct {
	// Total number of items across all pages
	Count int64 `json:"count"`
	// Current page number (1-based)
	Page int64 `json:"page"`
	// Total number of pages
	Pages int64 `json:"pages"`
	// Number of items per page
	PageSize int64 `json:"page_size"`
	// Whether there is a next page
	HasNext bool `json:"has_next"`
	// Whether there is a previous page
	HasPrevious bool `json:"has_previous"`
	// Next page number (null if no next page)
	NextPage *int64 `json:"next_page,omitempty"`
	// Previous page number (null if no previous page)
	PreviousPage *int64 `json:"previous_page,omitempty"`
	// Array of items for current page
	Results []UserProfile `json:"results"`
}

// Serializer for user profiles.
type PatchedUserProfileRequest struct {
	Website *string `json:"website,omitempty"`
	Github *string `json:"github,omitempty"`
	Twitter *string `json:"twitter,omitempty"`
	Linkedin *string `json:"linkedin,omitempty"`
	Company *string `json:"company,omitempty"`
	JobTitle *string `json:"job_title,omitempty"`
}

// Serializer for updating user profiles.
type PatchedUserProfileUpdateRequest struct {
	Website *string `json:"website,omitempty"`
	Github *string `json:"github,omitempty"`
	Twitter *string `json:"twitter,omitempty"`
	Linkedin *string `json:"linkedin,omitempty"`
	Company *string `json:"company,omitempty"`
	JobTitle *string `json:"job_title,omitempty"`
}

// Serializer for user profiles.
type UserProfile struct {
	ID int64 `json:"id"`
	User int64 `json:"user"`
	// Get basic user information.
	UserInfo map[string]interface{} `json:"user_info"`
	Website *string `json:"website,omitempty"`
	Github *string `json:"github,omitempty"`
	Twitter *string `json:"twitter,omitempty"`
	Linkedin *string `json:"linkedin,omitempty"`
	Company *string `json:"company,omitempty"`
	JobTitle *string `json:"job_title,omitempty"`
	PostsCount int64 `json:"posts_count"`
	CommentsCount int64 `json:"comments_count"`
	OrdersCount int64 `json:"orders_count"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Serializer for user profiles.
type UserProfileRequest struct {
	Website *string `json:"website,omitempty"`
	Github *string `json:"github,omitempty"`
	Twitter *string `json:"twitter,omitempty"`
	Linkedin *string `json:"linkedin,omitempty"`
	Company *string `json:"company,omitempty"`
	JobTitle *string `json:"job_title,omitempty"`
}

// Serializer for profile statistics.
type UserProfileStats struct {
	TotalProfiles int64 `json:"total_profiles"`
	ProfilesWithCompany int64 `json:"profiles_with_company"`
	ProfilesWithSocialLinks int64 `json:"profiles_with_social_links"`
	MostActiveUsers []UserProfile `json:"most_active_users"`
}

// Serializer for updating user profiles.
type UserProfileUpdate struct {
	Website *string `json:"website,omitempty"`
	Github *string `json:"github,omitempty"`
	Twitter *string `json:"twitter,omitempty"`
	Linkedin *string `json:"linkedin,omitempty"`
	Company *string `json:"company,omitempty"`
	JobTitle *string `json:"job_title,omitempty"`
}

// Serializer for updating user profiles.
type UserProfileUpdateRequest struct {
	Website *string `json:"website,omitempty"`
	Github *string `json:"github,omitempty"`
	Twitter *string `json:"twitter,omitempty"`
	Linkedin *string `json:"linkedin,omitempty"`
	Company *string `json:"company,omitempty"`
	JobTitle *string `json:"job_title,omitempty"`
}

