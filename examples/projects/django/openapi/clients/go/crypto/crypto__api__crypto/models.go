// Code generated by django-cfg/django_client - DO NOT EDIT.
// Generated at: 2025-10-27T19:13:24.003678

package crypto__api__crypto

import (
	"time"
)

// Serializer for coins.
type Coin struct {
	ID int64 `json:"id"`
	// Coin symbol (e.g., BTC, ETH)
	Symbol string `json:"symbol"`
	// Full name (e.g., Bitcoin, Ethereum)
	Name string `json:"name"`
	Slug string `json:"slug"`
	// Current price in USD
	CurrentPriceUsd *string `json:"current_price_usd,omitempty"`
	// Market capitalization
	MarketCapUsd *string `json:"market_cap_usd,omitempty"`
	// 24h trading volume
	Volume24hUsd *string `json:"volume_24h_usd,omitempty"`
	PriceChange24hPercent *string `json:"price_change_24h_percent,omitempty"`
	PriceChange7dPercent *string `json:"price_change_7d_percent,omitempty"`
	PriceChange30dPercent *string `json:"price_change_30d_percent,omitempty"`
	LogoURL *string `json:"logo_url,omitempty"`
	Description *string `json:"description,omitempty"`
	Website *string `json:"website,omitempty"`
	WhitepaperURL *string `json:"whitepaper_url,omitempty"`
	// Market cap rank
	Rank *int64 `json:"rank,omitempty"`
	IsActive *bool `json:"is_active,omitempty"`
	IsTradeable *bool `json:"is_tradeable,omitempty"`
	IsPriceUp24h bool `json:"is_price_up_24h"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Lightweight serializer for coin lists.
type CoinList struct {
	ID int64 `json:"id"`
	// Coin symbol (e.g., BTC, ETH)
	Symbol string `json:"symbol"`
	// Full name (e.g., Bitcoin, Ethereum)
	Name string `json:"name"`
	Slug string `json:"slug"`
	// Current price in USD
	CurrentPriceUsd *string `json:"current_price_usd,omitempty"`
	// Market capitalization
	MarketCapUsd *string `json:"market_cap_usd,omitempty"`
	PriceChange24hPercent *string `json:"price_change_24h_percent,omitempty"`
	LogoURL *string `json:"logo_url,omitempty"`
	// Market cap rank
	Rank *int64 `json:"rank,omitempty"`
	IsPriceUp24h bool `json:"is_price_up_24h"`
}

// Serializer for coin statistics.
type CoinStats struct {
	TotalCoins int64 `json:"total_coins"`
	TotalMarketCapUsd string `json:"total_market_cap_usd"`
	TotalVolume24hUsd string `json:"total_volume_24h_usd"`
	TrendingCoins []CoinList `json:"trending_coins"`
}

// Serializer for exchanges.
type Exchange struct {
	ID int64 `json:"id"`
	// Exchange name
	Name string `json:"name"`
	Slug string `json:"slug"`
	// Exchange code (e.g., BINANCE, COINBASE)
	Code string `json:"code"`
	Description *string `json:"description,omitempty"`
	Website *string `json:"website,omitempty"`
	LogoURL *string `json:"logo_url,omitempty"`
	// 24h trading volume
	Volume24hUsd *string `json:"volume_24h_usd,omitempty"`
	// Number of trading pairs
	NumMarkets *int64 `json:"num_markets,omitempty"`
	// Number of supported coins
	NumCoins *int64 `json:"num_coins,omitempty"`
	MakerFeePercent *string `json:"maker_fee_percent,omitempty"`
	TakerFeePercent *string `json:"taker_fee_percent,omitempty"`
	IsActive *bool `json:"is_active,omitempty"`
	IsVerified *bool `json:"is_verified,omitempty"`
	SupportsAPI *bool `json:"supports_api,omitempty"`
	// Exchange rank by volume
	Rank *int64 `json:"rank,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// PaginatedCoinListList model.
type PaginatedCoinListList struct {
	// Total number of items across all pages
	Count int64 `json:"count"`
	// Current page number (1-based)
	Page int64 `json:"page"`
	// Total number of pages
	Pages int64 `json:"pages"`
	// Number of items per page
	PageSize int64 `json:"page_size"`
	// Whether there is a next page
	HasNext bool `json:"has_next"`
	// Whether there is a previous page
	HasPrevious bool `json:"has_previous"`
	// Next page number (null if no next page)
	NextPage *int64 `json:"next_page,omitempty"`
	// Previous page number (null if no previous page)
	PreviousPage *int64 `json:"previous_page,omitempty"`
	// Array of items for current page
	Results []CoinList `json:"results"`
}

// PaginatedExchangeList model.
type PaginatedExchangeList struct {
	// Total number of items across all pages
	Count int64 `json:"count"`
	// Current page number (1-based)
	Page int64 `json:"page"`
	// Total number of pages
	Pages int64 `json:"pages"`
	// Number of items per page
	PageSize int64 `json:"page_size"`
	// Whether there is a next page
	HasNext bool `json:"has_next"`
	// Whether there is a previous page
	HasPrevious bool `json:"has_previous"`
	// Next page number (null if no next page)
	NextPage *int64 `json:"next_page,omitempty"`
	// Previous page number (null if no previous page)
	PreviousPage *int64 `json:"previous_page,omitempty"`
	// Array of items for current page
	Results []Exchange `json:"results"`
}

// PaginatedWalletList model.
type PaginatedWalletList struct {
	// Total number of items across all pages
	Count int64 `json:"count"`
	// Current page number (1-based)
	Page int64 `json:"page"`
	// Total number of pages
	Pages int64 `json:"pages"`
	// Number of items per page
	PageSize int64 `json:"page_size"`
	// Whether there is a next page
	HasNext bool `json:"has_next"`
	// Whether there is a previous page
	HasPrevious bool `json:"has_previous"`
	// Next page number (null if no next page)
	NextPage *int64 `json:"next_page,omitempty"`
	// Previous page number (null if no previous page)
	PreviousPage *int64 `json:"previous_page,omitempty"`
	// Array of items for current page
	Results []Wallet `json:"results"`
}

// Serializer for wallets.
type Wallet struct {
	ID int64 `json:"id"`
	User int64 `json:"user"`
	Coin int64 `json:"coin"`
	CoinInfo CoinList `json:"coin_info"`
	// Available balance
	Balance *string `json:"balance,omitempty"`
	// Locked balance (in orders)
	LockedBalance string `json:"locked_balance"`
	TotalBalance string `json:"total_balance"`
	ValueUsd string `json:"value_usd"`
	// Deposit address
	Address *string `json:"address,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

