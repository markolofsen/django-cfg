// Code generated by django-cfg centrifugo codegen. DO NOT EDIT.

package centrifugo_client

import (
	"context"
	"time"
)

// APIClient is a thin wrapper over CentrifugoRPCClient with typed methods.
type APIClient struct {
	rpc *CentrifugoRPCClient
}

// NewAPIClient creates a new typed API client.
//
// Args:
//   - url: Centrifugo WebSocket URL
//   - token: JWT token for authentication
//   - userID: User ID for reply channel
//
// Example:
//
//	client := NewAPIClient("ws://localhost:8000/connection/websocket", token, "user123")
//	if err := client.Connect(ctx); err != nil {
//	    log.Fatal(err)
//	}
//	defer client.Disconnect()
func NewAPIClient(url, token, userID string) *APIClient {
	return &APIClient{
		rpc: NewCentrifugoRPCClient(url, token, userID, 30*time.Second),
	}
}

// Connect establishes connection to Centrifugo.
func (api *APIClient) Connect(ctx context.Context) error {
	return api.rpc.Connect(ctx)
}

// Disconnect closes the connection.
func (api *APIClient) Disconnect() error {
	return api.rpc.Disconnect()
}

// SystemHealth Check system health status.
// Returns current status of all system components including
// database, cache, and overall health.
func (api *APIClient) SystemHealth(ctx context.Context, params HealthCheckParams) (*HealthCheckResult, error) {
	var result HealthCheckResult
	err := api.rpc.Call(ctx, "system.health", params, &result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

// UsersUpdatePresence Update user presence status.
// Updates the user's online status and broadcasts to subscribers.
func (api *APIClient) UsersUpdatePresence(ctx context.Context, params UserPresenceParams) (*UserPresenceResult, error) {
	var result UserPresenceResult
	err := api.rpc.Call(ctx, "users.update_presence", params, &result)
	if err != nil {
		return nil, err
	}
	return &result, nil
}

